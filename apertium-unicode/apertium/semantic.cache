;; Object apertium/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "apertium/"
  :tables (list 
   (semanticdb-table "Transfer.C"
    :major-mode 'c++-mode
    :tags '(("apertium/Transfer.H" include (:system-flag t) nil [798 828]) ("apertium/TRXReader.H" include (:system-flag t) nil [829 860]) ("apertium/UtfConverter.H" include (:system-flag t) nil [861 895]) ("lttoolbox/Compression.H" include (:system-flag t) nil [896 930]) ("lttoolbox/XMLParseUtil.H" include (:system-flag t) nil [931 966]) ("cctype" include (:system-flag t) nil [968 985]) ("iostream" include (:system-flag t) nil [986 1005]) ("stack" include (:system-flag t) nil [1006 1022]) ("copy" function (:parent "Transfer" :arguments (("o" variable (:constant-flag t :type ("Transfer" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1066 1084])) :type "void") nil [1046 1088]) ("destroy" function (:parent "Transfer" :type "void") nil [1090 1222]) ("Transfer" function (:constructor-flag t :parent "Transfer" :type ("Transfer" type "class")) nil [1224 1338]) ("Transfer" function (:destructor-flag t :parent "Transfer" :type "void") nil [1340 1378]) ("Transfer" function (:constructor-flag t :parent "Transfer" :arguments (("o" variable (:constant-flag t :type ("Transfer" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1399 1417])) :type ("Transfer" type "class")) nil [1380 1432]) ("readData" function (:parent "Transfer" :arguments (("in" variable (:pointer 1 :type ("FILE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1584 1593])) :type "void") nil [1559 3390]) ("readBil" function (:parent "Transfer" :arguments (("fstfile" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3415 3437])) :type "void") nil [3392 3650]) ("read" function (:parent "Transfer" :arguments (("transferfile" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3672 3699]) ("datafile" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3700 3723]) ("fstfile" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3732 3754])) :type "void") nil [3652 4015]) ("readTransfer" function (:parent "Transfer" :arguments (("in" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4045 4062])) :type "void") nil [4017 5048]) ("collectRules" function (:parent "Transfer" :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5078 5097])) :type "void") nil [5050 5449]) ("collectMacros" function (:parent "Transfer" :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5480 5499])) :type "void") nil [5451 5653]) ("evalString" function (:parent "Transfer" :arguments (("element" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5684 5701])) :type ("string" type (:type "class") nil nil)) nil [5655 11662]) ("processOut" function (:parent "Transfer" :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11690 11709])) :type "void") nil [11664 13603]) ("processChunk" function (:parent "Transfer" :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13633 13652])) :type "void") nil [13605 17035]) ("processTags" function (:parent "Transfer" :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17064 17083])) :type "void") nil [17037 17510]) ("processInstruction" function (:parent "Transfer" :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17546 17565])) :type "void") nil [17512 18198]) ("processLet" function (:parent "Transfer" :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [18226 18245])) :type "void") nil [18200 20827]) ("processAppend" function (:parent "Transfer" :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [20858 20877])) :type "void") nil [20829 21262]) ("processModifyCase" function (:parent "Transfer" :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [21297 21316])) :type "void") nil [21264 23218]) ("processCallMacro" function (:parent "Transfer" :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [23252 23271])) :type "void") nil [23220 24451]) ("processChoose" function (:parent "Transfer" :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [24482 24501])) :type "void") nil [24453 25374]) ("processLogical" function (:parent "Transfer" :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [25406 25425])) :type ("bool" type (:type "class") nil nil)) nil [25376 26330]) ("processIn" function (:parent "Transfer" :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [26357 26376])) :type ("bool" type (:type "class") nil nil)) nil [26332 27201]) ("processTest" function (:parent "Transfer" :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [27230 27249])) :type ("bool" type (:type "class") nil nil)) nil [27203 27423]) ("processAnd" function (:parent "Transfer" :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [27451 27470])) :type ("bool" type (:type "class") nil nil)) nil [27425 27673]) ("processOr" function (:parent "Transfer" :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [27700 27719])) :type ("bool" type (:type "class") nil nil)) nil [27675 27925]) ("processNot" function (:parent "Transfer" :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [27953 27972])) :type ("bool" type (:type "class") nil nil)) nil [27927 28145]) ("processEqual" function (:parent "Transfer" :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [28175 28194])) :type ("bool" type (:type "class") nil nil)) nil [28147 28828]) ("beginsWith" function (:parent "Transfer" :arguments (("s1" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [28856 28873]) ("s2" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [28874 28891])) :type ("bool" type (:type "class") nil nil)) nil [28830 29123]) ("endsWith" function (:parent "Transfer" :arguments (("s1" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [29149 29166]) ("s2" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [29167 29184])) :type ("bool" type (:type "class") nil nil)) nil [29125 29418]) ("processBeginsWith" function (:parent "Transfer" :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [29454 29473])) :type ("bool" type (:type "class") nil nil)) nil [29421 30137]) ("processEndsWith" function (:parent "Transfer" :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [30170 30189])) :type ("bool" type (:type "class") nil nil)) nil [30139 30847]) ("processContainsSubstring" function (:parent "Transfer" :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [30889 30908])) :type ("bool" type (:type "class") nil nil)) nil [30849 31602]) ("copycase" function (:parent "Transfer" :arguments (("source_word" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [31630 31656]) ("target_word" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [31657 31683])) :type ("string" type (:type "class") nil nil)) nil [31604 32265]) ("caseOf" function (:parent "Transfer" :arguments (("str" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [32292 32310])) :type ("string" type (:type "class") nil nil)) nil [32267 32674]) ("tolower" function (:parent "Transfer" :arguments (("str" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [32701 32719])) :type ("string" type (:type "class") nil nil)) nil [32676 32879]) ("tags" function (:parent "Transfer" :arguments (("str" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [32903 32921])) :type ("string" type (:type "class") nil nil)) nil [32881 33170]) ("processRule" function (:parent "Transfer" :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33199 33218])) :type "void") nil [33172 33419]) ("readToken" function (:parent "Transfer" :arguments (("in" variable (:pointer 1 :type ("FILE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33457 33466])) :type ("TransferToken" type (:type "class") nil nil)) nil [33421 34393]) ("transfer" function (:parent "Transfer" :arguments (("in" variable (:pointer 1 :type ("FILE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34419 34428]) ("out" variable (:pointer 1 :type ("FILE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34429 34439])) :type "void") nil [34395 36414]) ("applyRule" function (:parent "Transfer" :type "void") nil [36416 37404]) ("applyWord" function (:parent "Transfer" :arguments (("word_str" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [37431 37455])) :type "void") nil [37406 38060]))
    :file "Transfer.C"
    :pointmax 38061
    :unmatched-syntax 'nil
    )
   (semanticdb-table "Transfer.H"
    :major-mode 'c++-mode
    :tags '(("_TRANSFER_" variable (:constant-flag t) nil [817 838]) ("apertium/TransferInstr.H" include (:system-flag t) nil [837 872]) ("apertium/TransferToken.H" include (:system-flag t) nil [873 908]) ("apertium/TransferWord.H" include (:system-flag t) nil [909 943]) ("lttoolbox/Alphabet.H" include (:system-flag t) nil [944 975]) ("lttoolbox/Buffer.H" include (:system-flag t) nil [976 1005]) ("lttoolbox/FSTProcessor.H" include (:system-flag t) nil [1006 1041]) ("lttoolbox/MatchExe.H" include (:system-flag t) nil [1042 1073]) ("lttoolbox/MatchState.H" include (:system-flag t) nil [1074 1107]) ("cstdio" include (:system-flag t) nil [1109 1126]) ("libxml/parser.h" include (:system-flag t) nil [1127 1153]) ("libxml/tree.h" include (:system-flag t) nil [1154 1178]) ("map" include (:system-flag t) nil [1179 1193]) ("set" include (:system-flag t) nil [1194 1208]) ("vector" include (:system-flag t) nil [1209 1226]) ("Transfer" type (:members (("private" label nil (reparse-symbol classsubparts) [1267 1275]) ("alphabet" variable (:type ("Alphabet" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1281 1299]) ("me" variable (:pointer 1 :type ("MatchExe" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1302 1315]) ("ms" variable (:type ("MatchState" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1318 1332]) ("attr_items" variable (:type ("map" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1335 1366]) ("variables" variable (:type ("map" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1369 1399]) ("macros" variable (:type ("map" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1402 1426]) ("lists" variable (:type ("map" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1429 1461]) ("listslow" variable (:type ("map" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1464 1499]) ("macro_map" variable (:type ("vector" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1502 1530]) ("rule_map" variable (:type ("vector" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1533 1560]) ("doc" variable (:pointer 1 :type ("xmlDoc" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1563 1575]) ("root_element" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1578 1600]) ("word" variable (:pointer 2 :type ("TransferWord" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1603 1623]) ("blank" variable (:pointer 2 :type ("string" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1626 1641]) ("input_buffer" variable (:type ("Buffer" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1644 1679]) ("tmpword" variable (:type ("vector" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1682 1708]) ("tmpblank" variable (:type ("vector" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1711 1738]) ("fstp" variable (:type ("FSTProcessor" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1742 1760]) ("output" variable (:pointer 1 :type ("FILE" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1763 1776]) ("any_char" variable (:type "int") (reparse-symbol classsubparts) [1779 1792]) ("any_tag" variable (:type "int") (reparse-symbol classsubparts) [1795 1807]) ("lastrule" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1811 1829]) ("nwords" variable (:type "unsigned int") (reparse-symbol classsubparts) [1832 1852]) ("evalStringCache" variable (:type ("map" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1858 1904]) ("OutputType" type (:members (("lu" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1924 1927]) ("chunk" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1927 1933])) :type "enum") (reparse-symbol classsubparts) [1908 1934]) ("defaultAttrs" variable (:type ("OutputType" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1940 1964]) ("copy" function (:prototype-flag t :arguments (("o" variable (:constant-flag t :type ("Transfer" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1980 1998])) :type "void") (reparse-symbol classsubparts) [1970 1999]) ("destroy" function (:prototype-flag t :type "void") (reparse-symbol classsubparts) [2002 2017]) ("readData" function (:prototype-flag t :arguments (("input" variable (:pointer 1 :type ("FILE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2034 2046])) :type "void") (reparse-symbol classsubparts) [2020 2047]) ("readBil" function (:prototype-flag t :arguments (("filename" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2063 2086])) :type "void") (reparse-symbol classsubparts) [2050 2087]) ("readTransfer" function (:prototype-flag t :arguments (("input" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2108 2128])) :type "void") (reparse-symbol classsubparts) [2090 2129]) ("collectMacros" function (:prototype-flag t :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2151 2170])) :type "void") (reparse-symbol classsubparts) [2132 2171]) ("collectRules" function (:prototype-flag t :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2192 2211])) :type "void") (reparse-symbol classsubparts) [2174 2212]) ("caseOf" function (:prototype-flag t :arguments (("str" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2229 2247])) :type ("string" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2215 2248]) ("copycase" function (:prototype-flag t :arguments (("source_word" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2267 2293]) ("target_word" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2294 2320])) :type ("string" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2251 2321]) ("processLet" function (:prototype-flag t :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2341 2360])) :type "void") (reparse-symbol classsubparts) [2325 2361]) ("processAppend" function (:prototype-flag t :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2383 2402])) :type "void") (reparse-symbol classsubparts) [2364 2403]) ("processOut" function (:prototype-flag t :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2422 2441])) :type "void") (reparse-symbol classsubparts) [2406 2442]) ("processCallMacro" function (:prototype-flag t :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2467 2486])) :type "void") (reparse-symbol classsubparts) [2445 2487]) ("processModifyCase" function (:prototype-flag t :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2513 2532])) :type "void") (reparse-symbol classsubparts) [2490 2533]) ("processLogical" function (:prototype-flag t :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2556 2575])) :type ("bool" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2536 2576]) ("processTest" function (:prototype-flag t :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2596 2615])) :type ("bool" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2579 2616]) ("processAnd" function (:prototype-flag t :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2635 2654])) :type ("bool" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2619 2655]) ("processOr" function (:prototype-flag t :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2673 2692])) :type ("bool" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2658 2693]) ("processEqual" function (:prototype-flag t :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2714 2733])) :type ("bool" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2696 2734]) ("processBeginsWith" function (:prototype-flag t :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2760 2779])) :type ("bool" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2737 2780]) ("processEndsWith" function (:prototype-flag t :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2804 2823])) :type ("bool" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2783 2824]) ("processContainsSubstring" function (:prototype-flag t :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2857 2876])) :type ("bool" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2827 2877]) ("processNot" function (:prototype-flag t :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2896 2915])) :type ("bool" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2880 2916]) ("processIn" function (:prototype-flag t :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2934 2953])) :type ("bool" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2919 2954]) ("processRule" function (:prototype-flag t :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2974 2993])) :type "void") (reparse-symbol classsubparts) [2957 2994]) ("evalString" function (:prototype-flag t :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3015 3034])) :type ("string" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2997 3035]) ("processInstruction" function (:prototype-flag t :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3062 3081])) :type "void") (reparse-symbol classsubparts) [3038 3082]) ("processChoose" function (:prototype-flag t :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3104 3123])) :type "void") (reparse-symbol classsubparts) [3085 3124]) ("processChunk" function (:prototype-flag t :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3145 3164])) :type "void") (reparse-symbol classsubparts) [3127 3165]) ("processTags" function (:prototype-flag t :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3185 3204])) :type "void") (reparse-symbol classsubparts) [3168 3205]) ("beginsWith" function (:prototype-flag t :arguments (("str1" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3225 3244]) ("str2" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3245 3264])) :type ("bool" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3209 3271]) ("endsWith" function (:prototype-flag t :arguments (("str1" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3288 3307]) ("str2" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3308 3327])) :type ("bool" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3274 3334]) ("tolower" function (:prototype-flag t :arguments (("str" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3352 3370])) :type ("string" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3337 3377]) ("tags" function (:prototype-flag t :arguments (("str" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3392 3410])) :type ("string" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3380 3417]) ("readWord" function (:prototype-flag t :arguments (("in" variable (:pointer 1 :type ("FILE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3437 3446])) :type ("wstring" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3420 3447]) ("readBlank" function (:prototype-flag t :arguments (("in" variable (:pointer 1 :type ("FILE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3468 3477])) :type ("wstring" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3450 3478]) ("readUntil" function (:prototype-flag t :arguments (("in" variable (:pointer 1 :type ("FILE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3499 3508]) ("symbol" variable (:constant-flag t :type "int") (reparse-symbol arg-sub-list) [3509 3526])) :type ("wstring" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3481 3533]) ("applyWord" function (:prototype-flag t :arguments (("word_str" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3551 3575])) :type "void") (reparse-symbol classsubparts) [3536 3576]) ("applyRule" function (:prototype-flag t :type "void") (reparse-symbol classsubparts) [3579 3596]) ("readToken" function (:prototype-flag t :arguments (("in" variable (:pointer 1 :type ("FILE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3625 3634])) :type ("TransferToken" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3599 3635]) ("public" label nil (reparse-symbol classsubparts) [3636 3643]) ("Transfer" function (:prototype-flag t :constructor-flag t :type ("Transfer" type "class")) (reparse-symbol classsubparts) [3646 3657]) ("Transfer" function (:prototype-flag t :destructor-flag t :type "void") (reparse-symbol classsubparts) [3660 3672]) ("Transfer" function (:prototype-flag t :constructor-flag t :arguments (("o" variable (:constant-flag t :type ("Transfer" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3684 3702])) :type ("Transfer" type "class")) (reparse-symbol classsubparts) [3675 3703]) ("read" function (:prototype-flag t :arguments (("transferfile" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3763 3790]) ("datafile" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3791 3814]) ("fstfile" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3820 3842])) :type "void") (reparse-symbol classsubparts) [3753 3843]) ("transfer" function (:prototype-flag t :arguments (("in" variable (:pointer 1 :type ("FILE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3860 3869]) ("out" variable (:pointer 1 :type ("FILE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3870 3880])) :type "void") (reparse-symbol classsubparts) [3846 3881])) :type "class") nil [1250 3884]))
    :file "Transfer.H"
    :pointmax 3893
    :unmatched-syntax 'nil
    )
   (semanticdb-table "TransferWord.H"
    :major-mode 'c++-mode
    :tags '(("_TRANSFERWORD_" variable (:constant-flag t) nil [822 847]) ("map" include (:system-flag t) nil [846 860]) ("pcrecpp.h" include (:system-flag t) nil [861 881]) ("string" include (:system-flag t) nil [882 899]) ("TransferWord" type (:members (("private" label nil (reparse-symbol classsubparts) [986 994]) ("s_str" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1035 1048]) ("t_str" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1092 1105]) ("queue_length" variable (:type "int") (reparse-symbol classsubparts) [1141 1158]) ("copy" function (:prototype-flag t :arguments (("o" variable (:constant-flag t :type ("TransferWord" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1239 1261])) :type "void") (reparse-symbol classsubparts) [1229 1262]) ("destroy" function (:prototype-flag t :type "void") (reparse-symbol classsubparts) [1300 1315]) ("access" function (:prototype-flag t :arguments (("str" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1562 1580]) ("part" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1581 1600])) :type ("string" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1548 1601]) ("assign" function (:prototype-flag t :arguments (("str" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1856 1868]) ("part" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1869 1888]) ("value" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1889 1909])) :type "void") (reparse-symbol classsubparts) [1844 1910]) ("public" label nil (reparse-symbol classsubparts) [1912 1919]) ("TransferWord" function (:prototype-flag t :constructor-flag t :type ("TransferWord" type "class")) (reparse-symbol classsubparts) [1966 1981]) ("TransferWord" function (:prototype-flag t :destructor-flag t :type "void") (reparse-symbol classsubparts) [2012 2028]) ("TransferWord" function (:prototype-flag t :constructor-flag t :arguments (("o" variable (:constant-flag t :type ("TransferWord" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2119 2141])) :type ("TransferWord" type "class")) (reparse-symbol classsubparts) [2106 2142]) ("TransferWord" function (:prototype-flag t :constructor-flag t :arguments (("src" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2303 2321]) ("tgt" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2322 2340]) ("queue" variable (:default-value "0" :type "int") (reparse-symbol arg-sub-list) [2341 2354])) :type ("TransferWord" type "class")) (reparse-symbol classsubparts) [2290 2356]) ("init" function (:prototype-flag t :arguments (("src" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2708 2726]) ("tgt" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2727 2745])) :type "void") (reparse-symbol classsubparts) [2698 2746]) ("source" function (:prototype-flag t :arguments (("part" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2981 3000]) ("with_queue" variable (:default-value "true)" :type ("bool" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3001 3024])) :type ("string" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2967 3025]) ("target" function (:prototype-flag t :arguments (("part" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3258 3277]) ("with_queue" variable (:default-value "true)" :type ("bool" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3278 3301])) :type ("string" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3244 3302]) ("setSource" function (:prototype-flag t :arguments (("part" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3546 3565]) ("value" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3566 3586]) ("with_queue" variable (:default-value "true)" :type ("bool" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3591 3614])) :type "void") (reparse-symbol classsubparts) [3531 3615]) ("setTarget" function (:prototype-flag t :arguments (("part" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3859 3878]) ("value" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3879 3899]) ("with_queue" variable (:default-value "true)" :type ("bool" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3904 3927])) :type "void") (reparse-symbol classsubparts) [3844 3928])) :type "class") nil [965 3931]))
    :file "TransferWord.H"
    :pointmax 3940
    :unmatched-syntax 'nil
    )
   (semanticdb-table "TransferWord.C"
    :major-mode 'c++-mode
    :tags '(("apertium/TransferWord.H" include (:system-flag t) nil [799 833]) ("iostream" include (:system-flag t) nil [834 853]) ("TransferWord::compiled_regexes" variable (:type ("map" type (:type "class") nil nil)) nil [855 914]) ("copy" function (:parent "TransferWord" :arguments (("o" variable (:constant-flag t :type ("TransferWord" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [940 962])) :type "void") nil [916 1037]) ("destroy" function (:parent "TransferWord" :type "void") nil [1039 1071]) ("access" function (:parent "TransferWord" :arguments (("str" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1101 1119]) ("part" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1120 1139])) :type ("string" type (:type "class") nil nil)) nil [1073 1222]) ("getRegex" function (:parent "TransferWord" :arguments (("part" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1261 1280])) :type ("pcrecpp::RE" type (:type "class") nil nil)) nil [1224 1575]) ("TransferWord" function (:constructor-flag t :parent "TransferWord" :type ("TransferWord" type "class")) nil [1577 1609]) ("TransferWord" function (:constructor-flag t :parent "TransferWord" :arguments (("src" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1638 1656]) ("tgt" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1657 1675]) ("queue" variable (:type "int") (reparse-symbol arg-sub-list) [1676 1686])) :type ("TransferWord" type "class")) nil [1611 1732]) ("TransferWord" function (:destructor-flag t :parent "TransferWord" :type "void") nil [1734 1780]) ("TransferWord" function (:constructor-flag t :parent "TransferWord" :arguments (("o" variable (:constant-flag t :type ("TransferWord" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1809 1831])) :type ("TransferWord" type "class")) nil [1782 1846]) ("init" function (:parent "TransferWord" :arguments (("src" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2009 2027]) ("tgt" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2028 2046])) :type "void") nil [1985 2080]) ("source" function (:parent "TransferWord" :arguments (("part" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2110 2129]) ("with_queue" variable (:type ("bool" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2130 2146])) :type ("string" type (:type "class") nil nil)) nil [2082 2293]) ("target" function (:parent "TransferWord" :arguments (("part" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2323 2342]) ("with_queue" variable (:type ("bool" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2343 2359])) :type ("string" type (:type "class") nil nil)) nil [2295 2506]) ("assign" function (:parent "TransferWord" :arguments (("str" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2534 2546]) ("part" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2547 2566]) ("value" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2567 2587])) :type "void") nil [2508 2630]) ("setSource" function (:parent "TransferWord" :arguments (("part" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2661 2680]) ("value" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2681 2701]) ("with_queue" variable (:type ("bool" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2706 2722])) :type "void") nil [2632 2967]) ("setTarget" function (:parent "TransferWord" :arguments (("part" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2998 3017]) ("value" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3018 3038]) ("with_queue" variable (:type ("bool" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3043 3059])) :type "void") nil [2969 3304]))
    :file "TransferWord.C"
    :pointmax 3305
    :unmatched-syntax 'nil
    )
   (semanticdb-table "UtfConverter.H"
    :major-mode 'c++-mode
    :tags '(("_UTFCONVERTER_" variable (:constant-flag t) nil [24 49]) ("string" include (:system-flag t) nil [48 65]) ("UtfConverter" type (:members (("fromUtf8" function (:prototype-flag t :arguments (("utf8string" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [135 160])) :type ("wstring" type (:type "class") nil nil)) (reparse-symbol namespacesubparts) [118 161]) ("toUtf8" function (:prototype-flag t :arguments (("widestring" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [180 206])) :type ("string" type (:type "class") nil nil)) (reparse-symbol namespacesubparts) [166 207])) :type "namespace") nil [89 209]))
    :file "UtfConverter.H"
    :pointmax 218
    :unmatched-syntax 'nil
    )
   (semanticdb-table "UtfConverter.C"
    :major-mode 'c++-mode
    :tags '(("apertium/UtfConverter.H" include (:system-flag t) nil [1 35]) ("iostream" include (:system-flag t) nil [36 55]) ("cstdlib" include (:system-flag t) nil [56 74]) ("UNI_REPLACEMENT_CHAR" variable (:constant-flag t :default-value (nil)) nil [77 123]) ("UNI_MAX_BMP" variable (:constant-flag t :default-value (nil)) nil [124 161]) ("UNI_MAX_UTF16" variable (:constant-flag t :default-value (nil)) nil [162 201]) ("UNI_MAX_UTF32" variable (:constant-flag t :default-value (nil)) nil [202 241]) ("UNI_MAX_LEGAL_UTF32" variable (:constant-flag t :default-value (nil)) nil [242 287]) ("UNI_SUR_HIGH_START" variable (:constant-flag t :default-value (nil)) nil [288 329]) ("UNI_SUR_HIGH_END" variable (:constant-flag t :default-value (nil)) nil [330 371]) ("UNI_SUR_LOW_START" variable (:constant-flag t :default-value (nil)) nil [372 413]) ("UNI_SUR_LOW_END" variable (:constant-flag t :default-value (nil)) nil [414 455]) ("UtfConverter" type (:members (("UTF32" type (:typedef ("unsigned long") :superclasses "unsigned long" :type "typedef") (reparse-symbol namespacesubparts) [507 536]) ("UTF16" type (:typedef ("unsigned short") :superclasses "unsigned short" :type "typedef") (reparse-symbol namespacesubparts) [562 591]) ("UTF8" type (:typedef ("unsigned char") :superclasses "unsigned char" :type "typedef") (reparse-symbol namespacesubparts) [617 645]) ("ConversionResult" type (:typedef (nil type (:members (("conversionOK" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [727 740]) ("sourceExhausted" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [774 790]) ("targetExhausted" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [842 858]) ("sourceIllegal" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [907 967])) :type "enum") nil nil) :type "typedef") (reparse-symbol namespacesubparts) [708 985]) ("ConversionFlags" type (:typedef (nil type (:members (("strictConversion" variable (:constant-flag t :default-value (1027 1028) :type "int") (reparse-symbol enumsubparts) [1008 1028]) ("lenientConversion" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [1034 1055])) :type "enum") nil nil) :type "typedef") (reparse-symbol namespacesubparts) [989 1072]) ("halfShift" variable (:typemodifiers ("static") :constant-flag t :default-value "10" :type "int") (reparse-symbol namespacesubparts) [1076 1109]) ("halfBase" variable (:typemodifiers ("static") :constant-flag t :default-value "0x0010000UL;" :type ("UTF32" type (:type "class") nil nil)) (reparse-symbol namespacesubparts) [1148 1190]) ("halfMask" variable (:typemodifiers ("static") :constant-flag t :default-value "0x3FFUL;" :type ("UTF32" type (:type "class") nil nil)) (reparse-symbol namespacesubparts) [1193 1231]) ("conversionError" function (:type "void") (reparse-symbol namespacesubparts) [1238 1341]) ("ConvertUTF32toUTF16" function (:arguments (("sourceStart" variable (:pointer 2 :constant-flag t :type ("UTF32" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1468 1494]) ("sourceEnd" variable (:pointer 1 :constant-flag t :type ("UTF32" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1495 1518]) ("targetStart" variable (:pointer 2 :type ("UTF16" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1525 1545]) ("targetEnd" variable (:pointer 1 :type ("UTF16" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1546 1563]) ("flags" variable (:type ("ConversionFlags" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1564 1586])) :type ("ConversionResult" type (:type "class") nil nil)) (reparse-symbol namespacesubparts) [1424 2892]) ("ConvertUTF16toUTF32" function (:arguments (("sourceStart" variable (:pointer 2 :constant-flag t :type ("UTF16" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3019 3045]) ("sourceEnd" variable (:pointer 1 :constant-flag t :type ("UTF16" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3046 3069]) ("targetStart" variable (:pointer 2 :type ("UTF32" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3076 3096]) ("targetEnd" variable (:pointer 1 :type ("UTF32" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3097 3114]) ("flags" variable (:type ("ConversionFlags" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3115 3137])) :type ("ConversionResult" type (:type "class") nil nil)) (reparse-symbol namespacesubparts) [2975 4746]) ("trailingBytesForUTF8" variable (:dereference 1 :typemodifiers ("static") :constant-flag t :default-value "{
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2, 3,3,3,3,3,3,3,3,4,4,4,4,5,5,5,5
  }" :type "char") (reparse-symbol namespacesubparts) [5168 5779]) ("offsetsFromUTF8" variable (:dereference 1 :typemodifiers ("static") :constant-flag t :default-value "{ 0x00000000UL, 0x00003080UL, 0x000E2080UL, 
					    0x03C82080UL, 0xFA082080UL, 0x82082080UL }" :type ("UTF32" type (:type "class") nil nil)) (reparse-symbol namespacesubparts) [5966 6103]) ("firstByteMark" variable (:dereference 1 :typemodifiers ("static") :constant-flag t :default-value "{ 0x00, 0x00, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC }" :type ("UTF8" type (:type "class") nil nil)) (reparse-symbol namespacesubparts) [6464 6546]) ("ConvertUTF16toUTF8" function (:arguments (("sourceStart" variable (:pointer 2 :constant-flag t :type ("UTF16" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7159 7185]) ("sourceEnd" variable (:pointer 1 :constant-flag t :type ("UTF16" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7186 7209]) ("targetStart" variable (:pointer 2 :type ("UTF8" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7222 7241]) ("targetEnd" variable (:pointer 1 :type ("UTF8" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7242 7258]) ("flags" variable (:type ("ConversionFlags" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7259 7281])) :type ("ConversionResult" type (:type "class") nil nil)) (reparse-symbol namespacesubparts) [7110 9798]) ("isLegalUTF8" function (:typemodifiers ("static") :arguments (("source" variable (:pointer 1 :constant-flag t :type ("UTF8" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10406 10425]) ("length" variable (:type "int") (reparse-symbol arg-sub-list) [10426 10437])) :type ("bool" type (:type "class") nil nil)) (reparse-symbol namespacesubparts) [10382 11251]) ("isLegalUTF8Sequence" function (:arguments (("source" variable (:pointer 1 :constant-flag t :type ("UTF8" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11493 11512]) ("sourceEnd" variable (:pointer 1 :constant-flag t :type ("UTF8" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11513 11535])) :type ("bool" type (:type "class") nil nil)) (reparse-symbol namespacesubparts) [11468 11694]) ("ConvertUTF8toUTF16" function (:arguments (("sourceStart" variable (:pointer 2 :constant-flag t :type ("UTF8" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11826 11851]) ("sourceEnd" variable (:pointer 1 :constant-flag t :type ("UTF8" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11852 11874]) ("targetStart" variable (:pointer 2 :type ("UTF16" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11887 11907]) ("targetEnd" variable (:pointer 1 :type ("UTF16" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11908 11925]) ("flags" variable (:type ("ConversionFlags" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11926 11948])) :type ("ConversionResult" type (:type "class") nil nil)) (reparse-symbol namespacesubparts) [11777 14174]) ("ConvertUTF32toUTF8" function (:arguments (("sourceStart" variable (:pointer 2 :constant-flag t :type ("UTF32" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14306 14332]) ("sourceEnd" variable (:pointer 1 :constant-flag t :type ("UTF32" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14333 14356]) ("targetStart" variable (:pointer 2 :type ("UTF8" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14369 14388]) ("targetEnd" variable (:pointer 1 :type ("UTF8" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14389 14405]) ("flags" variable (:type ("ConversionFlags" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14406 14428])) :type ("ConversionResult" type (:type "class") nil nil)) (reparse-symbol namespacesubparts) [14257 16137]) ("ConvertUTF8toUTF32" function (:arguments (("sourceStart" variable (:pointer 2 :constant-flag t :type ("UTF8" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16269 16294]) ("sourceEnd" variable (:pointer 1 :constant-flag t :type ("UTF8" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16295 16317]) ("targetStart" variable (:pointer 2 :type ("UTF32" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16330 16350]) ("targetEnd" variable (:pointer 1 :type ("UTF32" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16351 16368]) ("flags" variable (:type ("ConversionFlags" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16369 16391])) :type ("ConversionResult" type (:type "class") nil nil)) (reparse-symbol namespacesubparts) [16220 18079]) ("fromUtf8" function (:arguments (("utf8string" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [18102 18128])) :type ("wstring" type (:type "class") nil nil)) (reparse-symbol namespacesubparts) [18085 19365]) ("toUtf8" function (:arguments (("widestring" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [19383 19409])) :type ("string" type (:type "class") nil nil)) (reparse-symbol namespacesubparts) [19369 20712])) :type "namespace") nil [479 20714]))
    :file "UtfConverter.C"
    :pointmax 20715
    )
   (semanticdb-table "TransferInstr.H"
    :major-mode 'c++-mode
    :tags '(("_TRANSFERINSTR_" variable (:constant-flag t) nil [25 51]) ("TransferInstrType" type (:members (("ti_clip_sl" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [117 128]) ("ti_clip_tl" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [131 142]) ("ti_var" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [145 152]) ("ti_lit_tag" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [155 166]) ("ti_lit" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [169 176]) ("ti_b" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [179 184]) ("ti_get_case_from" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [187 204]) ("ti_case_of_sl" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [207 221]) ("ti_case_of_tl" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [224 238]) ("ti_linkto_sl" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [241 254]) ("ti_linkto_tl" variable (:constant-flag t :type "int") (reparse-symbol enumsubparts) [257 271])) :type "enum") nil [90 272]) ("TransferInstr" type (:members (("private" label nil (reparse-symbol classsubparts) [296 304]) ("type" variable (:type ("TransferInstrType" type (:type "class") nil nil)) (reparse-symbol classsubparts) [307 330]) ("content" variable (:type ("wstring" type (:type "class") nil nil)) (reparse-symbol classsubparts) [333 348]) ("pos" variable (:type "int") (reparse-symbol classsubparts) [351 359]) ("pointer" variable (:pointer 1 :type "void") (reparse-symbol classsubparts) [362 376]) ("condition" variable (:type ("bool" type (:type "class") nil nil)) (reparse-symbol classsubparts) [379 394]) ("copy" function (:prototype-flag t :arguments (("o" variable (:constant-flag t :type ("TransferInstr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [410 433])) :type "void") (reparse-symbol classsubparts) [400 434]) ("destroy" function (:prototype-flag t :type "void") (reparse-symbol classsubparts) [437 452]) ("public" label nil (reparse-symbol classsubparts) [453 460]) ("TransferInstr" function (:constructor-flag t :type ("TransferInstr" type "class")) (reparse-symbol classsubparts) [463 480]) ("TransferInstr" function (:prototype-flag t :constructor-flag t :arguments (("t" variable (:type ("TransferInstrType" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [498 518]) ("c" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [519 535]) ("p" variable (:constant-flag t :type "int") (reparse-symbol arg-sub-list) [536 548]) ("ptr" variable (:pointer 1 :default-value "NULL," :type "void") (reparse-symbol arg-sub-list) [566 581]) ("cond" variable (:default-value "true)" :type ("bool" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [582 599])) :type ("TransferInstr" type "class")) (reparse-symbol classsubparts) [484 600]) ("TransferInstr" function (:prototype-flag t :destructor-flag t :type "void") (reparse-symbol classsubparts) [603 620]) ("TransferInstr" function (:prototype-flag t :constructor-flag t :arguments (("o" variable (:constant-flag t :type ("TransferInstr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [637 660])) :type ("TransferInstr" type "class")) (reparse-symbol classsubparts) [623 661]) ("getType" function (:prototype-flag t :type ("TransferInstrType" type (:type "class") nil nil)) (reparse-symbol classsubparts) [724 752]) ("getContent" function (:prototype-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol classsubparts) [755 783]) ("getPos" function (:prototype-flag t :type "int") (reparse-symbol classsubparts) [786 799]) ("getPointer" function (:prototype-flag t :pointer 1 :type "void") (reparse-symbol classsubparts) [802 822]) ("getCondition" function (:prototype-flag t :type ("bool" type (:type "class") nil nil)) (reparse-symbol classsubparts) [825 845])) :type "class") nil [274 848]))
    :file "TransferInstr.H"
    :pointmax 857
    :unmatched-syntax 'nil
    )
   (semanticdb-table "TransferInstr.C"
    :major-mode 'c++-mode
    :tags '(("apertium/TransferInstr.H" include (:system-flag t) nil [1 36]) ("copy" function (:parent "TransferInstr" :arguments (("o" variable (:constant-flag t :type ("TransferInstr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [63 86])) :type "void") nil [38 195]) ("destroy" function (:parent "TransferInstr" :type "void") nil [197 230]) ("TransferInstr" function (:constructor-flag t :parent "TransferInstr" :arguments (("t" variable (:type ("TransferInstrType" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [261 281]) ("c" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [282 298]) ("p" variable (:constant-flag t :type "int") (reparse-symbol arg-sub-list) [329 341]) ("ptr" variable (:pointer 1 :type "void") (reparse-symbol arg-sub-list) [342 352]) ("cond" variable (:type ("bool" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [353 363])) :type ("TransferInstr" type "class")) nil [232 442]) ("TransferInstr" function (:destructor-flag t :parent "TransferInstr" :type "void") nil [444 492]) ("TransferInstr" function (:constructor-flag t :parent "TransferInstr" :arguments (("o" variable (:constant-flag t :type ("TransferInstr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [523 546])) :type ("TransferInstr" type "class")) nil [494 561]) ("getType" function (:parent "TransferInstr" :type ("TransferInstrType" type (:type "class") nil nil)) nil [703 764]) ("getContent" function (:parent "TransferInstr" :type ("wstring" type (:type "class") nil nil)) nil [766 830]) ("getPos" function (:parent "TransferInstr" :type "int") nil [832 877]) ("getPointer" function (:pointer 1 :parent "TransferInstr" :type "void") nil [879 935]) ("getCondition" function (:parent "TransferInstr" :type ("bool" type (:type "class") nil nil)) nil [937 995]))
    :file "TransferInstr.C"
    :pointmax 996
    :unmatched-syntax 'nil
    )
   (semanticdb-table "TRXReader.C"
    :major-mode 'c++-mode
    :tags '(("apertium/TRXReader.H" include (:system-flag t) nil [798 829]) ("lttoolbox/XMLParseUtil.H" include (:system-flag t) nil [830 865]) ("lttoolbox/Compression.H" include (:system-flag t) nil [866 900]) ("cstdlib" include (:system-flag t) nil [902 920]) ("iostream" include (:system-flag t) nil [921 940]) ("TRXReader::ANY_TAG" variable (:default-value "L\"<ANY_TAG>\"" :type ("wstring" type (:type "class") nil nil)) nil [942 990]) ("TRXReader::ANY_CHAR" variable (:default-value "L\"<ANY_CHAR>\"" :type ("wstring" type (:type "class") nil nil)) nil [992 1042]) ("copy" function (:parent "TRXReader" :arguments (("o" variable (:constant-flag t :type ("TRXReader" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1065 1084])) :type "void") nil [1044 1088]) ("destroy" function (:parent "TRXReader" :type "void") nil [1090 1119]) ("TRXReader" function (:constructor-flag t :parent "TRXReader" :type ("TRXReader" type "class")) nil [1121 1234]) ("TRXReader" function (:destructor-flag t :parent "TRXReader" :type "void") nil [1236 1276]) ("TRXReader" function (:constructor-flag t :parent "TRXReader" :arguments (("o" variable (:constant-flag t :type ("TRXReader" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1299 1318])) :type ("TRXReader" type "class")) nil [1278 1333]) ("step" function (:parent "TRXReader" :type "void") nil [1335 1570]) ("attrib" function (:parent "TRXReader" :arguments (("name" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1726 1746])) :type ("wstring" type (:type "class") nil nil)) nil [1700 1795]) ("parseError" function (:parent "TRXReader" :arguments (("message" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1825 1848])) :type "void") nil [1798 1988]) ("insertLemma" function (:parent "TRXReader" :arguments (("base" variable (:constant-flag t :type "int") (reparse-symbol arg-sub-list) [2017 2032]) ("lemma" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2033 2054])) :type "int") nil [1990 2639]) ("insertTags" function (:parent "TRXReader" :arguments (("base" variable (:constant-flag t :type "int") (reparse-symbol arg-sub-list) [2667 2682]) ("tags" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2683 2703])) :type "int") nil [2641 3710]) ("read" function (:parent "TRXReader" :arguments (("filename" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3733 3756])) :type "void") nil [3712 4684]) ("procRules" function (:parent "TRXReader" :type "void") nil [4686 7084]) ("write" function (:parent "TRXReader" :arguments (("filename" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7108 7131])) :type "void") nil [7086 7343]) ("procDefAttrs" function (:parent "TRXReader" :type "void") nil [7345 8127]) ("procDefCats" function (:parent "TRXReader" :type "void") nil [8129 9435]) ("procDefVars" function (:parent "TRXReader" :type "void") nil [9437 9978]) ("procDefLists" function (:parent "TRXReader" :type "void") nil [9980 10759]) ("procDefMacros" function (:parent "TRXReader" :type "void") nil [10761 11060]) ("createMacro" function (:parent "TRXReader" :arguments (("name" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11090 11110]) ("value" variable (:constant-flag t :type "int") (reparse-symbol arg-sub-list) [11111 11127])) :type "void") nil [11062 11296]) ("insertListItem" function (:parent "TRXReader" :arguments (("name" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11329 11349]) ("value" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11350 11371])) :type "void") nil [11298 11412]) ("createVar" function (:parent "TRXReader" :arguments (("name" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11440 11460])) :type "void") nil [11414 11497]) ("insertCatItem" function (:parent "TRXReader" :arguments (("name" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11529 11549]) ("lemma" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11550 11571]) ("tags" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11577 11597])) :type "void") nil [11499 11711]) ("insertAttrItem" function (:parent "TRXReader" :arguments (("name" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11745 11765]) ("tags" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11766 11786])) :type "void") nil [11713 12166]))
    :file "TRXReader.C"
    :pointmax 12167
    :unmatched-syntax 'nil
    )
   (semanticdb-table "TRXReader.H"
    :major-mode 'c++-mode
    :tags '(("_TRXREADER_" variable (:constant-flag t) nil [818 840]) ("apertium/TransferData.H" include (:system-flag t) nil [839 873]) ("libxml/xmlreader.h" include (:system-flag t) nil [875 904]) ("map" include (:system-flag t) nil [905 919]) ("string" include (:system-flag t) nil [920 937]) ("TRXReader" type (:members (("private" label nil (reparse-symbol classsubparts) [979 987]) ("LemmaTags" type (:members (("lemma" variable (:type ("wstring" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1015 1029]) ("tags" variable (:type ("wstring" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1034 1047])) :type "struct") (reparse-symbol classsubparts) [990 1052]) ("reader" variable (:type ("xmlTextReaderPtr" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1056 1080]) ("type" variable (:type "int") (reparse-symbol classsubparts) [1086 1095]) ("name" variable (:type ("wstring" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1098 1111]) ("cat_items" variable (:type ("multimap" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1115 1154]) ("td" variable (:type ("TransferData" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1157 1173]) ("attrib" function (:prototype-flag t :arguments (("name" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1192 1212])) :type ("wstring" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1177 1213]) ("parseError" function (:prototype-flag t :arguments (("message" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1233 1256])) :type "void") (reparse-symbol classsubparts) [1217 1257]) ("copy" function (:prototype-flag t :arguments (("o" variable (:constant-flag t :type ("TRXReader" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1270 1289])) :type "void") (reparse-symbol classsubparts) [1260 1290]) ("destroy" function (:prototype-flag t :type "void") (reparse-symbol classsubparts) [1293 1308]) ("clearTagIndex" function (:prototype-flag t :type "void") (reparse-symbol classsubparts) [1311 1332]) ("step" function (:prototype-flag t :type "void") (reparse-symbol classsubparts) [1338 1350]) ("procTransfer" function (:prototype-flag t :type "void") (reparse-symbol classsubparts) [1353 1373]) ("procDefCats" function (:prototype-flag t :type "void") (reparse-symbol classsubparts) [1376 1395]) ("procDefAttrs" function (:prototype-flag t :type "void") (reparse-symbol classsubparts) [1398 1418]) ("procDefVars" function (:prototype-flag t :type "void") (reparse-symbol classsubparts) [1421 1440]) ("procDefLists" function (:prototype-flag t :type "void") (reparse-symbol classsubparts) [1443 1463]) ("procDefMacros" function (:prototype-flag t :type "void") (reparse-symbol classsubparts) [1466 1487]) ("procRules" function (:prototype-flag t :type "void") (reparse-symbol classsubparts) [1490 1507]) ("insertCatItem" function (:prototype-flag t :arguments (("name" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1530 1550]) ("lemma" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1551 1572]) ("tags" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1581 1601])) :type "void") (reparse-symbol classsubparts) [1511 1602]) ("insertAttrItem" function (:prototype-flag t :arguments (("name" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1625 1645]) ("tags" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1646 1666])) :type "void") (reparse-symbol classsubparts) [1605 1667]) ("createVar" function (:prototype-flag t :arguments (("name" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1685 1705])) :type "void") (reparse-symbol classsubparts) [1670 1706]) ("insertListItem" function (:prototype-flag t :arguments (("name" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1729 1749]) ("value" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1750 1771])) :type "void") (reparse-symbol classsubparts) [1709 1772]) ("createMacro" function (:prototype-flag t :arguments (("name" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1792 1812]) ("val" variable (:constant-flag t :type "int") (reparse-symbol arg-sub-list) [1813 1827])) :type "void") (reparse-symbol classsubparts) [1775 1828]) ("insertLemma" function (:prototype-flag t :arguments (("base" variable (:constant-flag t :type "int") (reparse-symbol arg-sub-list) [1848 1863]) ("lemma" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1864 1885])) :type "int") (reparse-symbol classsubparts) [1832 1886]) ("insertTags" function (:prototype-flag t :arguments (("base" variable (:constant-flag t :type "int") (reparse-symbol arg-sub-list) [1904 1919]) ("tags" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1920 1940])) :type "int") (reparse-symbol classsubparts) [1889 1941]) ("public" label nil (reparse-symbol classsubparts) [1945 1952]) ("ANY_TAG" variable (:typemodifiers ("static") :type ("wstring" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1955 1984]) ("ANY_CHAR" variable (:typemodifiers ("static") :type ("wstring" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1987 2017]) ("TRXReader" function (:prototype-flag t :constructor-flag t :type ("TRXReader" type "class")) (reparse-symbol classsubparts) [2022 2034]) ("TRXReader" function (:prototype-flag t :destructor-flag t :type "void") (reparse-symbol classsubparts) [2037 2050]) ("TRXReader" function (:prototype-flag t :constructor-flag t :arguments (("o" variable (:constant-flag t :type ("TRXReader" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2063 2082])) :type ("TRXReader" type "class")) (reparse-symbol classsubparts) [2053 2083]) ("read" function (:prototype-flag t :arguments (("filename" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2143 2166])) :type "void") (reparse-symbol classsubparts) [2133 2167]) ("write" function (:prototype-flag t :arguments (("filename" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2181 2204])) :type "void") (reparse-symbol classsubparts) [2170 2205])) :type "class") nil [961 2208]))
    :file "TRXReader.H"
    :pointmax 2217
    )
   (semanticdb-table "TransferData.C"
    :major-mode 'c++-mode
    :tags '(("apertium/TransferData.H" include (:system-flag t) nil [799 833]) ("lttoolbox/Compression.H" include (:system-flag t) nil [834 868]) ("copy" function (:parent "TransferData" :arguments (("o" variable (:constant-flag t :type ("TransferData" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [894 916])) :type "void") nil [870 1091]) ("destroy" function (:parent "TransferData" :type "void") nil [1093 1125]) ("TransferData" function (:constructor-flag t :parent "TransferData" :type ("TransferData" type "class")) nil [1127 1159]) ("TransferData" function (:destructor-flag t :parent "TransferData" :type "void") nil [1161 1207]) ("TransferData" function (:constructor-flag t :parent "TransferData" :arguments (("o" variable (:constant-flag t :type ("TransferData" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1236 1258])) :type ("TransferData" type "class")) nil [1209 1273]) ("getAlphabet" function (:parent "TransferData" :type ("Alphabet" type (:type "class") nil nil)) nil [1412 1473]) ("getTransducer" function (:parent "TransferData" :type ("Transducer" type (:type "class") nil nil)) nil [1475 1543]) ("getFinals" function (:parent "TransferData" :type ("map" type (:type "class") nil nil)) nil [1545 1608]) ("getAttrItems" function (:parent "TransferData" :type ("map" type (:type "class") nil nil)) nil [1610 1687]) ("getMacros" function (:parent "TransferData" :type ("map" type (:type "class") nil nil)) nil [1689 1755]) ("getLists" function (:parent "TransferData" :type ("map" type (:type "class") nil nil)) nil [1757 1831]) ("getVariables" function (:parent "TransferData" :type ("map" type (:type "class") nil nil)) nil [1833 1909]) ("write" function (:parent "TransferData" :arguments (("output" variable (:pointer 1 :type ("FILE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1939 1952])) :type "void") nil [1913 3682]))
    :file "TransferData.C"
    :pointmax 3684
    )
   (semanticdb-table "LexTorData.C"
    :major-mode 'c++-mode
    :tags '(("apertium/LexTorData.H" include (:system-flag t) nil [834 866]) ("apertium/StringUtils.H" include (:system-flag t) nil [867 900]) ("apertium/LexTorWord.H" include (:system-flag t) nil [901 933]) ("apertium/LexTor.H" include (:system-flag t) nil [934 962]) ("lttoolbox/Compression.H" include (:system-flag t) nil [964 998]) ("lttoolbox/EndianUtil.H" include (:system-flag t) nil [999 1032]) ("LexTorData" function (:constructor-flag t :parent "LexTorData" :type ("LexTorData" type "class")) nil [1034 1198]) ("LexTorData" function (:constructor-flag t :parent "LexTorData" :arguments (("ltd" variable (:constant-flag t :type ("LexTorData" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1225 1247])) :type ("LexTorData" type "class")) nil [1202 1673]) ("LexTorData" function (:destructor-flag t :parent "LexTorData" :type "void") nil [1677 1706]) ("vote_from_word" function (:parent "LexTorData" :arguments (("lexical_choice" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1751 1781]) ("word" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1782 1802])) :type ("COUNT_DATA_TYPE" type (:type "class") nil nil)) nil [1708 2181]) ("set_wordcount" function (:parent "LexTorData" :arguments (("word" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2351 2371]) ("c" variable (:type ("COUNT_DATA_TYPE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2372 2390])) :type "void") nil [2319 2485]) ("get_wordcount" function (:parent "LexTorData" :arguments (("word" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2530 2550])) :type ("COUNT_DATA_TYPE" type (:type "class") nil nil)) nil [2487 2723]) ("get_lexchoice_sum" function (:parent "LexTorData" :arguments (("lexical_choice" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2771 2801])) :type ("COUNT_DATA_TYPE" type (:type "class") nil nil)) nil [2725 2879]) ("set_lexchoice_sum" function (:parent "LexTorData" :arguments (("lexical_choice" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2917 2947]) ("sum" variable (:type ("COUNT_DATA_TYPE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2948 2968])) :type "void") nil [2881 3043]) ("is_stopword" function (:parent "LexTorData" :arguments (("word" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3074 3094])) :type ("bool" type (:type "class") nil nil)) nil [3045 3170]) ("read" function (:parent "LexTorData" :arguments (("is" variable (:pointer 1 :type ("FILE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3195 3204])) :type "void") nil [3172 5551]) ("write" function (:parent "LexTorData" :arguments (("os" variable (:pointer 1 :type ("FILE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5577 5586])) :type "void") nil [5553 8394]) ("read_stopwords" function (:parent "LexTorData" :arguments (("is" variable (:type ("wistream" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8429 8442])) :type "void") nil [8396 8726]) ("read_words" function (:parent "LexTorData" :arguments (("is" variable (:type ("wistream" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8759 8772])) :type "void") nil [8730 9006]) ("read_lexical_choices" function (:parent "LexTorData" :arguments (("fstp" variable (:type ("FSTProcessor" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9047 9066])) :type "void") nil [9008 9587]) ("get_words" function (:parent "LexTorData" :type ("set" type (:type "class") nil nil)) nil [9589 9645]) ("get_lexical_choices" function (:parent "LexTorData" :arguments (("word" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9693 9713])) :type ("set" type (:type "class") nil nil)) nil [9647 9771]) ("set_nwords_per_set" function (:parent "LexTorData" :arguments (("i" variable (:type "int") (reparse-symbol arg-sub-list) [9810 9816])) :type "void") nil [9773 9910]) ("set_cooccurrence_context" function (:parent "LexTorData" :arguments (("lexical_choice" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9955 9985]) ("context" variable (:constant-flag t :type ("vector" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10024 10079])) :type "void") nil [9912 10850]) ("ensure_stopwords_ok" function (:parent "LexTorData" :type "void") nil [10852 11745]) ("reduce" function (:parent "LexTorData" :arguments (("s" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11775 11792])) :type ("wstring" type (:type "class") nil nil)) nil [11747 12584]) ("reduce_lexical_choice" function (:parent "LexTorData" :arguments (("s" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12629 12646])) :type ("wstring" type (:type "class") nil nil)) nil [12586 13069]) ("new_word_register" function (:parent "LexTorData" :arguments (("word" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13107 13127])) :type "void") nil [13071 13695]) ("get_module_lexchoice_vector" function (:parent "LexTorData" :arguments (("lexical_choice" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14172 14202])) :type "double") nil [14124 14537]) ("cosine" function (:parent "LexTorData" :arguments (("reduced_lexch1" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14566 14596]) ("reduced_lexch2" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14597 14627])) :type "double") nil [14539 16039]))
    :file "LexTorData.C"
    :pointmax 16040
    :unmatched-syntax 'nil
    )
   (semanticdb-table "LexTorData.H"
    :major-mode 'c++-mode
    :tags '(("__LEXTORDATA_H" variable (:constant-flag t) nil [856 881]) ("iostream" include (:system-flag t) nil [880 899]) ("map" include (:system-flag t) nil [900 914]) ("set" include (:system-flag t) nil [915 929]) ("string" include (:system-flag t) nil [930 947]) ("vector" include (:system-flag t) nil [948 965]) ("cmath" include (:system-flag t) nil [966 982]) ("cstdio" include (:system-flag t) nil [983 1000]) ("lttoolbox/FSTProcessor.H" include (:system-flag t) nil [1002 1037]) ("WORD_DATA_TYPE" variable (:constant-flag t) nil [1039 1070]) ("MAX_WORD_INDEX" variable (:constant-flag t) nil [1077 1150]) ("COUNT_DATA_TYPE" variable (:constant-flag t) nil [1149 1178]) ("NULLWORD" variable (:constant-flag t :default-value (nil)) nil [1180 1208]) ("LexTorData" type (:members (("private" label nil (reparse-symbol classsubparts) [1309 1317]) ("n_stopwords" variable (:type ("WORD_DATA_TYPE" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1321 1348]) ("n_words" variable (:type ("WORD_DATA_TYPE" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1351 1374]) ("n_words_per_set" variable (:type ("WORD_DATA_TYPE" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1377 1408]) ("n_set" variable (:type ("WORD_DATA_TYPE" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1411 1432]) ("word2index" variable (:type ("map" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1513 1553]) ("index2word" variable (:type ("vector" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1556 1583]) ("wordcount" variable (:type ("map" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1587 1634]) ("lexchoice_set" variable (:type ("map" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1790 1863]) ("lexchoice_sum" variable (:type ("map" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1944 1995]) ("stopwords" variable (:type ("set" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2130 2153]) ("words" variable (:type ("set" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2187 2206]) ("lexical_choices" variable (:type ("map" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2287 2331]) ("reduced_lexical_choices" variable (:type ("set" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2337 2374]) ("new_word_register" function (:prototype-flag t :arguments (("w" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2401 2418])) :type "void") (reparse-symbol classsubparts) [2378 2419]) ("public" label nil (reparse-symbol classsubparts) [2420 2427]) ("LexTorData" function (:prototype-flag t :constructor-flag t :type ("LexTorData" type "class")) (reparse-symbol classsubparts) [2431 2444]) ("LexTorData" function (:prototype-flag t :constructor-flag t :arguments (("ltd" variable (:constant-flag t :type ("LexTorData" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2461 2483])) :type ("LexTorData" type "class")) (reparse-symbol classsubparts) [2450 2484]) ("LexTorData" function (:prototype-flag t :destructor-flag t :type "void") (reparse-symbol classsubparts) [2490 2504]) ("vote_from_word" function (:prototype-flag t :arguments (("lexical_choice" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2539 2569]) ("word" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2570 2590])) :type ("COUNT_DATA_TYPE" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2508 2591]) ("get_lexchoice_sum" function (:prototype-flag t :arguments (("lexical_choice" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2691 2721])) :type ("COUNT_DATA_TYPE" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2657 2722]) ("set_wordcount" function (:prototype-flag t :arguments (("word" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2745 2765]) ("c" variable (:type ("COUNT_DATA_TYPE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2766 2784])) :type "void") (reparse-symbol classsubparts) [2726 2785]) ("get_wordcount" function (:prototype-flag t :arguments (("word" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2818 2838])) :type ("COUNT_DATA_TYPE" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2788 2839]) ("set_lexchoice_sum" function (:prototype-flag t :arguments (("lexical_choice" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2866 2896]) ("sum" variable (:type ("COUNT_DATA_TYPE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2897 2917])) :type "void") (reparse-symbol classsubparts) [2843 2918]) ("is_stopword" function (:prototype-flag t :arguments (("word" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2939 2959])) :type ("bool" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2922 2960]) ("read" function (:prototype-flag t :arguments (("is" variable (:pointer 1 :type ("FILE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2974 2983])) :type "void") (reparse-symbol classsubparts) [2964 2984]) ("write" function (:prototype-flag t :arguments (("os" variable (:pointer 1 :type ("FILE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2999 3008])) :type "void") (reparse-symbol classsubparts) [2988 3009]) ("read_stopwords" function (:prototype-flag t :arguments (("is" variable (:type ("wistream" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3033 3046])) :type "void") (reparse-symbol classsubparts) [3013 3047]) ("read_words" function (:prototype-flag t :arguments (("is" variable (:type ("wistream" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3067 3080])) :type "void") (reparse-symbol classsubparts) [3051 3081]) ("read_lexical_choices" function (:prototype-flag t :arguments (("fstp" variable (:type ("FSTProcessor" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3111 3130])) :type "void") (reparse-symbol classsubparts) [3085 3131]) ("set_nwords_per_set" function (:prototype-flag t :arguments (("i" variable (:type "int") (reparse-symbol arg-sub-list) [3159 3165])) :type "void") (reparse-symbol classsubparts) [3135 3166]) ("set_cooccurrence_context" function (:prototype-flag t :arguments (("lexical_choice" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3200 3230]) ("context" variable (:constant-flag t :type ("vector" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3264 3319])) :type "void") (reparse-symbol classsubparts) [3170 3320]) ("get_module_lexchoice_vector" function (:prototype-flag t :arguments (("lexical_choice" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3460 3490])) :type "double") (reparse-symbol classsubparts) [3425 3491]) ("cosine" function (:prototype-flag t :arguments (("reduced_lexch1" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3509 3539]) ("reduced_lexch2" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3540 3570])) :type "double") (reparse-symbol classsubparts) [3495 3571]) ("get_words" function (:prototype-flag t :type ("set" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3575 3600]) ("get_lexical_choices" function (:prototype-flag t :arguments (("word" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3637 3657])) :type ("set" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3604 3658]) ("ensure_stopwords_ok" function (:prototype-flag t :type "void") (reparse-symbol classsubparts) [3789 3816]) ("reduce" function (:prototype-flag t :arguments (("s" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3954 3971])) :type ("wstring" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3939 3972]) ("reduce_lexical_choice" function (:prototype-flag t :arguments (("s" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4006 4023])) :type ("wstring" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3976 4024])) :type "class") nil [1291 4027]))
    :file "LexTorData.H"
    :pointmax 4036
    :unmatched-syntax 'nil
    )
   (semanticdb-table "StringUtils.C"
    :major-mode 'c++-mode
    :tags '(("apertium/StringUtils.H" include (:system-flag t) nil [834 867]) ("lttoolbox/XMLParseUtil.H" include (:system-flag t) nil [868 903]) ("iostream" include (:system-flag t) nil [904 923]) ("trim" function (:parent "StringUtils" :arguments (("str" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1018 1037])) :type ("wstring" type (:type "class") nil nil)) nil [991 1334]) ("split_wstring" function (:parent "StringUtils" :arguments (("input" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1379 1400]) ("delimiter" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1401 1426])) :type ("vector" type (:type "class") nil nil)) nil [1336 1935]) ("vector2wstring" function (:parent "StringUtils" :arguments (("v" variable (:constant-flag t :type ("vector" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1974 1999])) :type ("wstring" type (:type "class") nil nil)) nil [1937 2127]) ("substitute" function (:parent "StringUtils" :arguments (("source" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2162 2184]) ("olds" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2185 2205]) ("news" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2206 2226])) :type ("wstring" type (:type "class") nil nil)) nil [2129 2415]) ("itoa" function (:parent "StringUtils" :arguments (("n" variable (:type "int") (reparse-symbol arg-sub-list) [2443 2449])) :type ("wstring" type (:type "class") nil nil)) nil [2417 2529]) ("ftoa" function (:parent "StringUtils" :arguments (("f" variable (:type "double") (reparse-symbol arg-sub-list) [2557 2566])) :type ("wstring" type (:type "class") nil nil)) nil [2531 2646]) ("tolower" function (:parent "StringUtils" :arguments (("s" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2677 2694])) :type ("wstring" type (:type "class") nil nil)) nil [2648 2809]) ("toupper" function (:parent "StringUtils" :arguments (("s" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2840 2857])) :type ("wstring" type (:type "class") nil nil)) nil [2811 2974]))
    :file "StringUtils.C"
    :pointmax 2975
    :unmatched-syntax 'nil
    )
   (semanticdb-table "StringUtils.H"
    :major-mode 'c++-mode
    :tags '(("__STRINGUTILS_H_" variable (:constant-flag t) nil [858 885]) ("string" include (:system-flag t) nil [884 901]) ("vector" include (:system-flag t) nil [902 919]) ("StringUtils" type (:members (("public" label nil (reparse-symbol classsubparts) [965 972]) ("trim" function (:prototype-flag t :typemodifiers ("static") :arguments (("str" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [998 1017])) :type ("wstring" type (:type "class") nil nil)) (reparse-symbol classsubparts) [978 1018]) ("split_wstring" function (:prototype-flag t :typemodifiers ("static") :arguments (("input" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1059 1080]) ("delimiter" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1081 1106])) :type ("vector" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1022 1107]) ("vector2wstring" function (:prototype-flag t :typemodifiers ("static") :arguments (("v" variable (:constant-flag t :type ("vector" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1141 1166])) :type ("wstring" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1111 1167]) ("substitute" function (:prototype-flag t :typemodifiers ("static") :arguments (("source" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1285 1307]) ("olds" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1308 1328]) ("news" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1329 1349])) :type ("wstring" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1259 1350]) ("itoa" function (:prototype-flag t :typemodifiers ("static") :arguments (("n" variable (:type "int") (reparse-symbol arg-sub-list) [1374 1380])) :type ("wstring" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1354 1381]) ("ftoa" function (:prototype-flag t :typemodifiers ("static") :arguments (("f" variable (:type "double") (reparse-symbol arg-sub-list) [1407 1416])) :type ("wstring" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1387 1417]) ("tolower" function (:prototype-flag t :typemodifiers ("static") :arguments (("s" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1444 1461])) :type ("wstring" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1421 1462]) ("toupper" function (:prototype-flag t :typemodifiers ("static") :arguments (("s" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1489 1506])) :type ("wstring" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1466 1507])) :type "class") nil [943 1510]))
    :file "StringUtils.H"
    :pointmax 1519
    )
   (semanticdb-table "LexTor.C"
    :major-mode 'c++-mode
    :tags '(("apertium/LexTor.H" include (:system-flag t) nil [834 862]) ("apertium/StringUtils.H" include (:system-flag t) nil [863 896]) ("algorithm" include (:system-flag t) nil [898 918]) ("string" include (:system-flag t) nil [919 936]) ("cmath" include (:system-flag t) nil [937 953]) ("PI" variable (:constant-flag t :default-value (nil)) nil [955 1003]) ("LexTor::debug" variable (:type ("bool" type (:type "class") nil nil)) nil [1005 1024]) ("LexTor::angleth" variable (:type "double") nil [1025 1048]) ("LexTor" function (:constructor-flag t :parent "LexTor" :type ("LexTor" type "class")) nil [1050 1106]) ("LexTor" function (:constructor-flag t :parent "LexTor" :arguments (("lt" variable (:constant-flag t :type ("LexTor" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1125 1142])) :type ("LexTor" type "class")) nil [1110 1198]) ("LexTor" function (:destructor-flag t :parent "LexTor" :type "void") nil [1202 1223]) ("set_lextor_data" function (:parent "LexTor" :arguments (("ltd" variable (:pointer 1 :type ("LexTorData" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1255 1271])) :type "void") nil [1225 1294]) ("set_tlmodel" function (:parent "LexTor" :arguments (("tlm" variable (:pointer 1 :type ("LexTorData" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1322 1338])) :type "void") nil [1296 1357]) ("set_bildic" function (:parent "LexTor" :arguments (("fstp" variable (:pointer 1 :type ("FSTProcessor" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1384 1403])) :type "void") nil [1359 1423]) ("trainwrd" function (:parent "LexTor" :arguments (("is" variable (:type ("wistream" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1448 1461]) ("left" variable (:type "int") (reparse-symbol arg-sub-list) [1462 1471]) ("right" variable (:type "int") (reparse-symbol arg-sub-list) [1472 1482]) ("weigth_exponent" variable (:type "double") (reparse-symbol arg-sub-list) [1483 1506])) :type "void") nil [1425 5154]) ("trainlch" function (:parent "LexTor" :arguments (("is" variable (:type ("wistream" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5179 5192]) ("left" variable (:type "int") (reparse-symbol arg-sub-list) [5193 5202]) ("right" variable (:type "int") (reparse-symbol arg-sub-list) [5203 5213]) ("tlwordmodel" variable (:type ("LexTorData" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5214 5238]) ("dic" variable (:type ("FSTProcessor" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5257 5275]) ("bildic" variable (:type ("FSTProcessor" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5276 5297]) ("weigth_exponent" variable (:type "double") (reparse-symbol arg-sub-list) [5298 5321])) :type "void") nil [5156 16281]) ("lexical_selector" function (:parent "LexTor" :arguments (("is" variable (:type ("wistream" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16314 16327]) ("fstp" variable (:type ("FSTProcessor" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16328 16347]) ("left" variable (:type "int") (reparse-symbol arg-sub-list) [16348 16357]) ("right" variable (:type "int") (reparse-symbol arg-sub-list) [16358 16368]) ("weigth_exponent" variable (:type "double") (reparse-symbol arg-sub-list) [16369 16392]) ("lteval" variable (:pointer 1 :type ("LexTorEval" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16393 16412])) :type "void") nil [16283 19997]) ("estimate_winner_lch" function (:parent "LexTor" :arguments (("window" variable (:type ("deque" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [20032 20058]) ("word_index" variable (:type "int") (reparse-symbol arg-sub-list) [20059 20074]) ("weigth_exponent" variable (:type "double") (reparse-symbol arg-sub-list) [20075 20098])) :type "int") nil [19999 20423]) ("estimate_winner_lch_voting" function (:parent "LexTor" :arguments (("window" variable (:type ("deque" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [20465 20491]) ("word_index" variable (:type "int") (reparse-symbol arg-sub-list) [20492 20507]) ("weigth_exponent" variable (:type "double") (reparse-symbol arg-sub-list) [20508 20531])) :type "int") nil [20425 23900]) ("estimate_winner_lch_mostprob" function (:parent "LexTor" :arguments (("window" variable (:type ("deque" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [23944 23970]) ("word_index" variable (:type "int") (reparse-symbol arg-sub-list) [23971 23986]) ("weigth_exponent" variable (:type "double") (reparse-symbol arg-sub-list) [23988 24011])) :type "int") nil [23902 24644]) ("estimate_winner_lch_cosine" function (:parent "LexTor" :arguments (("window" variable (:type ("deque" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [24686 24712]) ("word_index" variable (:type "int") (reparse-symbol arg-sub-list) [24713 24728]) ("weigth_exponent" variable (:type "double") (reparse-symbol arg-sub-list) [24729 24752])) :type "int") nil [24646 26526]) ("estimate_winner_lch_votingtl" function (:parent "LexTor" :arguments (("window" variable (:type ("deque" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [26570 26596]) ("word_index" variable (:type "int") (reparse-symbol arg-sub-list) [26597 26612]) ("weigth_exponent" variable (:type "double") (reparse-symbol arg-sub-list) [26613 26636])) :type "int") nil [26528 30978]) ("cosine" function (:parent "LexTor" :arguments (("vcontext" variable (:type ("map" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [31003 31034]) ("reduced_lexchoice" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [31035 31068])) :type "double") nil [30980 32535]))
    :file "LexTor.C"
    :pointmax 32536
    )
   (semanticdb-table "LexTor.H"
    :major-mode 'c++-mode
    :tags '(("__LEXTOR_H" variable (:constant-flag t) nil [852 873]) ("iostream" include (:system-flag t) nil [872 891]) ("fstream" include (:system-flag t) nil [892 910]) ("string" include (:system-flag t) nil [911 928]) ("deque" include (:system-flag t) nil [929 945]) ("apertium/LexTorData.H" include (:system-flag t) nil [947 979]) ("apertium/LexTorWord.H" include (:system-flag t) nil [980 1012]) ("apertium/LexTorEval.H" include (:system-flag t) nil [1013 1045]) ("LexTor" type (:members (("private" label nil (reparse-symbol classsubparts) [1133 1141]) ("lextor_data" variable (:pointer 1 :type ("LexTorData" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1144 1168]) ("tlmodel" variable (:pointer 1 :type ("LexTorData" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1242 1262]) ("fstpbil" variable (:pointer 1 :type ("FSTProcessor" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1265 1287]) ("estimate_winner_lch" function (:prototype-flag t :arguments (("window" variable (:type ("deque" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1315 1341]) ("word_index" variable (:type "int") (reparse-symbol arg-sub-list) [1342 1357]) ("weigth_exponent" variable (:type "double") (reparse-symbol arg-sub-list) [1359 1382])) :type "int") (reparse-symbol classsubparts) [1291 1383]) ("estimate_winner_lch_voting" function (:prototype-flag t :arguments (("window" variable (:type ("deque" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1417 1443]) ("word_index" variable (:type "int") (reparse-symbol arg-sub-list) [1444 1459]) ("weigth_exponent" variable (:type "double") (reparse-symbol arg-sub-list) [1461 1484])) :type "int") (reparse-symbol classsubparts) [1386 1485]) ("estimate_winner_lch_cosine" function (:prototype-flag t :arguments (("window" variable (:type ("deque" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1519 1545]) ("word_index" variable (:type "int") (reparse-symbol arg-sub-list) [1546 1561]) ("weigth_exponent" variable (:type "double") (reparse-symbol arg-sub-list) [1563 1586])) :type "int") (reparse-symbol classsubparts) [1488 1587]) ("estimate_winner_lch_mostprob" function (:prototype-flag t :arguments (("window" variable (:type ("deque" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1623 1649]) ("word_index" variable (:type "int") (reparse-symbol arg-sub-list) [1650 1665]) ("weigth_exponent" variable (:type "double") (reparse-symbol arg-sub-list) [1667 1690])) :type "int") (reparse-symbol classsubparts) [1590 1691]) ("estimate_winner_lch_votingtl" function (:prototype-flag t :arguments (("window" variable (:type ("deque" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1727 1753]) ("word_index" variable (:type "int") (reparse-symbol arg-sub-list) [1754 1769]) ("weigth_exponent" variable (:type "double") (reparse-symbol arg-sub-list) [1771 1794])) :type "int") (reparse-symbol classsubparts) [1694 1795]) ("cosine" function (:prototype-flag t :arguments (("vcontext" variable (:type ("map" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1813 1844]) ("reduced_lexchoice" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1845 1878])) :type "double") (reparse-symbol classsubparts) [1799 1879]) ("public" label nil (reparse-symbol classsubparts) [1880 1887]) ("debug" variable (:typemodifiers ("static") :type ("bool" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1891 1909]) ("angleth" variable (:typemodifiers ("static") :type "double") (reparse-symbol classsubparts) [1912 1934]) ("LexTor" function (:prototype-flag t :constructor-flag t :type ("LexTor" type "class")) (reparse-symbol classsubparts) [1938 1947]) ("LexTor" function (:prototype-flag t :constructor-flag t :arguments (("lt" variable (:constant-flag t :type ("LexTor" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1960 1977])) :type ("LexTor" type "class")) (reparse-symbol classsubparts) [1953 1978]) ("LexTor" function (:prototype-flag t :destructor-flag t :type "void") (reparse-symbol classsubparts) [1984 1994]) ("set_lextor_data" function (:prototype-flag t :arguments (("ltd" variable (:pointer 1 :type ("LexTorData" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2019 2035])) :type "void") (reparse-symbol classsubparts) [1998 2036]) ("set_tlmodel" function (:prototype-flag t :arguments (("tlm" variable (:pointer 1 :type ("LexTorData" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2156 2172])) :type "void") (reparse-symbol classsubparts) [2139 2173]) ("set_bildic" function (:prototype-flag t :arguments (("fstp" variable (:pointer 1 :type ("FSTProcessor" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2192 2211])) :type "void") (reparse-symbol classsubparts) [2176 2212]) ("trainwrd" function (:prototype-flag t :arguments (("wis" variable (:type ("wistream" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2230 2244]) ("left" variable (:type "int") (reparse-symbol arg-sub-list) [2245 2254]) ("right" variable (:type "int") (reparse-symbol arg-sub-list) [2255 2265]) ("weigth_exponent" variable (:default-value "0" :type "double") (reparse-symbol arg-sub-list) [2266 2290])) :type "void") (reparse-symbol classsubparts) [2216 2292]) ("trainlch" function (:prototype-flag t :arguments (("wis" variable (:type ("wistream" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2310 2324]) ("left" variable (:type "int") (reparse-symbol arg-sub-list) [2325 2334]) ("right" variable (:type "int") (reparse-symbol arg-sub-list) [2335 2345]) ("wordmodel" variable (:type ("LexTorData" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2346 2368]) ("dic" variable (:type ("FSTProcessor" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2386 2404]) ("bildic" variable (:type ("FSTProcessor" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2405 2426]) ("weigth_exponent" variable (:default-value "0" :type "double") (reparse-symbol arg-sub-list) [2427 2451])) :type "void") (reparse-symbol classsubparts) [2296 2453]) ("lexical_selector" function (:prototype-flag t :arguments (("wis" variable (:type ("wistream" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2479 2493]) ("fstp" variable (:type ("FSTProcessor" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2494 2513]) ("left" variable (:type "int") (reparse-symbol arg-sub-list) [2514 2523]) ("right" variable (:type "int") (reparse-symbol arg-sub-list) [2524 2534]) ("weigth_exponent" variable (:default-value "0" :type "double") (reparse-symbol arg-sub-list) [2560 2584]) ("lteval" variable (:pointer 1 :default-value "NULL)" :type ("LexTorEval" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2586 2610])) :type "void") (reparse-symbol classsubparts) [2457 2611])) :type "class") nil [1118 3178]) ("PairStringCountComparer" type (:members (("public" label nil (reparse-symbol classsubparts) [3212 3219]) ("()" function (:arguments (("e1" variable (:constant-flag t :type ("pair" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3238 3279]) ("e2" variable (:constant-flag t :type ("pair" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3280 3321])) :type ("bool" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3222 3505])) :type "class") nil [3180 3508]))
    :file "LexTor.H"
    :pointmax 3517
    )
   (semanticdb-table "Interchunk.C"
    :major-mode 'c++-mode
    :tags '(("apertium/Interchunk.H" include (:system-flag t) nil [798 830]) ("apertium/TRXReader.H" include (:system-flag t) nil [831 862]) ("apertium/UtfConverter.H" include (:system-flag t) nil [863 897]) ("lttoolbox/Compression.H" include (:system-flag t) nil [898 932]) ("lttoolbox/XMLParseUtil.H" include (:system-flag t) nil [933 968]) ("cctype" include (:system-flag t) nil [970 987]) ("iostream" include (:system-flag t) nil [988 1007]) ("stack" include (:system-flag t) nil [1008 1024]) ("copy" function (:parent "Interchunk" :arguments (("o" variable (:constant-flag t :type ("Interchunk" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1070 1090])) :type "void") nil [1048 1094]) ("destroy" function (:parent "Interchunk" :type "void") nil [1096 1230]) ("Interchunk" function (:constructor-flag t :parent "Interchunk" :type ("Interchunk" type "class")) nil [1232 1329]) ("Interchunk" function (:destructor-flag t :parent "Interchunk" :type "void") nil [1331 1373]) ("Interchunk" function (:constructor-flag t :parent "Interchunk" :arguments (("o" variable (:constant-flag t :type ("Interchunk" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1398 1418])) :type ("Interchunk" type "class")) nil [1375 1433]) ("readData" function (:parent "Interchunk" :arguments (("in" variable (:pointer 1 :type ("FILE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1593 1602])) :type "void") nil [1566 4007]) ("read" function (:parent "Interchunk" :arguments (("transferfile" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4031 4058]) ("datafile" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4059 4082])) :type "void") nil [4009 4323]) ("readInterchunk" function (:parent "Interchunk" :arguments (("in" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4357 4374])) :type "void") nil [4325 4968]) ("collectRules" function (:parent "Interchunk" :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5000 5019])) :type "void") nil [4970 5371]) ("collectMacros" function (:parent "Interchunk" :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5404 5423])) :type "void") nil [5373 5577]) ("evalString" function (:parent "Interchunk" :arguments (("element" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5610 5627])) :type ("string" type (:type "class") nil nil)) nil [5579 9227]) ("processOut" function (:parent "Interchunk" :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9257 9276])) :type "void") nil [9229 9612]) ("processChunk" function (:parent "Interchunk" :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9644 9663])) :type "void") nil [9614 9943]) ("processTags" function (:parent "Interchunk" :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9974 9993])) :type "void") nil [9945 10420]) ("processInstruction" function (:parent "Interchunk" :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10458 10477])) :type "void") nil [10422 11005]) ("processLet" function (:parent "Interchunk" :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11035 11054])) :type "void") nil [11007 12721]) ("processModifyCase" function (:parent "Interchunk" :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12758 12777])) :type "void") nil [12723 13911]) ("processCallMacro" function (:parent "Interchunk" :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13947 13966])) :type "void") nil [13913 15150]) ("processChoose" function (:parent "Interchunk" :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15183 15202])) :type "void") nil [15152 16075]) ("processLogical" function (:parent "Interchunk" :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16109 16128])) :type ("bool" type (:type "class") nil nil)) nil [16077 17033]) ("processIn" function (:parent "Interchunk" :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17062 17081])) :type ("bool" type (:type "class") nil nil)) nil [17035 17906]) ("processTest" function (:parent "Interchunk" :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17937 17956])) :type ("bool" type (:type "class") nil nil)) nil [17908 18130]) ("processAnd" function (:parent "Interchunk" :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [18160 18179])) :type ("bool" type (:type "class") nil nil)) nil [18132 18382]) ("processOr" function (:parent "Interchunk" :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [18411 18430])) :type ("bool" type (:type "class") nil nil)) nil [18384 18636]) ("processNot" function (:parent "Interchunk" :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [18666 18685])) :type ("bool" type (:type "class") nil nil)) nil [18638 18858]) ("processEqual" function (:parent "Interchunk" :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [18890 18909])) :type ("bool" type (:type "class") nil nil)) nil [18860 19543]) ("beginsWith" function (:parent "Interchunk" :arguments (("s1" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [19573 19590]) ("s2" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [19591 19608])) :type ("bool" type (:type "class") nil nil)) nil [19545 19840]) ("endsWith" function (:parent "Interchunk" :arguments (("s1" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [19868 19885]) ("s2" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [19886 19903])) :type ("bool" type (:type "class") nil nil)) nil [19842 20137]) ("processBeginsWith" function (:parent "Interchunk" :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [20175 20194])) :type ("bool" type (:type "class") nil nil)) nil [20140 20858]) ("processEndsWith" function (:parent "Interchunk" :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [20893 20912])) :type ("bool" type (:type "class") nil nil)) nil [20860 21570]) ("processContainsSubstring" function (:parent "Interchunk" :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [21614 21633])) :type ("bool" type (:type "class") nil nil)) nil [21572 22324]) ("copycase" function (:parent "Interchunk" :arguments (("source_word" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22354 22380]) ("target_word" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22381 22407])) :type ("string" type (:type "class") nil nil)) nil [22326 22989]) ("caseOf" function (:parent "Interchunk" :arguments (("str" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [23018 23036])) :type ("string" type (:type "class") nil nil)) nil [22991 23400]) ("tolower" function (:parent "Interchunk" :arguments (("str" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [23429 23447])) :type ("string" type (:type "class") nil nil)) nil [23402 23607]) ("tags" function (:parent "Interchunk" :arguments (("str" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [23633 23651])) :type ("string" type (:type "class") nil nil)) nil [23609 23900]) ("processRule" function (:parent "Interchunk" :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [23931 23950])) :type "void") nil [23902 24151]) ("readToken" function (:parent "Interchunk" :arguments (("in" variable (:pointer 1 :type ("FILE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [24191 24200])) :type ("TransferToken" type (:type "class") nil nil)) nil [24153 25444]) ("interchunk" function (:parent "Interchunk" :arguments (("in" variable (:pointer 1 :type ("FILE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [25474 25483]) ("out" variable (:pointer 1 :type ("FILE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [25484 25494])) :type "void") nil [25446 26938]) ("applyRule" function (:parent "Interchunk" :type "void") nil [26940 27807]) ("applyWord" function (:parent "Interchunk" :arguments (("word_str" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [27836 27860])) :type "void") nil [27809 28562]))
    :file "Interchunk.C"
    :pointmax 28563
    :unmatched-syntax 'nil
    )
   (semanticdb-table "Interchunk.H"
    :major-mode 'c++-mode
    :tags '(("_INTERCHUNK_" variable (:constant-flag t) nil [819 842]) ("apertium/TransferInstr.H" include (:system-flag t) nil [841 876]) ("apertium/TransferToken.H" include (:system-flag t) nil [877 912]) ("apertium/InterchunkWord.H" include (:system-flag t) nil [913 949]) ("lttoolbox/Alphabet.H" include (:system-flag t) nil [950 981]) ("lttoolbox/Buffer.H" include (:system-flag t) nil [982 1011]) ("lttoolbox/FSTProcessor.H" include (:system-flag t) nil [1012 1047]) ("lttoolbox/MatchExe.H" include (:system-flag t) nil [1048 1079]) ("lttoolbox/MatchState.H" include (:system-flag t) nil [1080 1113]) ("cstdio" include (:system-flag t) nil [1115 1132]) ("libxml/parser.h" include (:system-flag t) nil [1133 1159]) ("libxml/tree.h" include (:system-flag t) nil [1160 1184]) ("map" include (:system-flag t) nil [1185 1199]) ("set" include (:system-flag t) nil [1200 1214]) ("vector" include (:system-flag t) nil [1215 1232]) ("Interchunk" type (:members (("private" label nil (reparse-symbol classsubparts) [1275 1283]) ("alphabet" variable (:type ("Alphabet" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1289 1307]) ("me" variable (:pointer 1 :type ("MatchExe" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1310 1323]) ("ms" variable (:type ("MatchState" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1326 1340]) ("attr_items" variable (:type ("map" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1343 1374]) ("variables" variable (:type ("map" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1377 1407]) ("macros" variable (:type ("map" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1410 1434]) ("lists" variable (:type ("map" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1437 1469]) ("listslow" variable (:type ("map" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1472 1507]) ("macro_map" variable (:type ("vector" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1510 1538]) ("rule_map" variable (:type ("vector" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1541 1568]) ("doc" variable (:pointer 1 :type ("xmlDoc" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1571 1583]) ("root_element" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1586 1608]) ("word" variable (:pointer 2 :type ("InterchunkWord" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1611 1633]) ("blank" variable (:pointer 2 :type ("string" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1636 1651]) ("input_buffer" variable (:type ("Buffer" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1654 1689]) ("tmpword" variable (:type ("vector" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1692 1718]) ("tmpblank" variable (:type ("vector" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1721 1748]) ("output" variable (:pointer 1 :type ("FILE" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1752 1765]) ("any_char" variable (:type "int") (reparse-symbol classsubparts) [1768 1781]) ("any_tag" variable (:type "int") (reparse-symbol classsubparts) [1784 1796]) ("lastrule" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1800 1818]) ("nwords" variable (:type "unsigned int") (reparse-symbol classsubparts) [1821 1841]) ("evalStringCache" variable (:type ("map" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1847 1893]) ("copy" function (:prototype-flag t :arguments (("o" variable (:constant-flag t :type ("Interchunk" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1907 1927])) :type "void") (reparse-symbol classsubparts) [1897 1928]) ("destroy" function (:prototype-flag t :type "void") (reparse-symbol classsubparts) [1931 1946]) ("readData" function (:prototype-flag t :arguments (("input" variable (:pointer 1 :type ("FILE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1963 1975])) :type "void") (reparse-symbol classsubparts) [1949 1976]) ("readInterchunk" function (:prototype-flag t :arguments (("input" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1999 2019])) :type "void") (reparse-symbol classsubparts) [1979 2020]) ("collectMacros" function (:prototype-flag t :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2042 2061])) :type "void") (reparse-symbol classsubparts) [2023 2062]) ("collectRules" function (:prototype-flag t :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2083 2102])) :type "void") (reparse-symbol classsubparts) [2065 2103]) ("caseOf" function (:prototype-flag t :arguments (("str" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2120 2138])) :type ("string" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2106 2139]) ("copycase" function (:prototype-flag t :arguments (("source_word" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2158 2184]) ("target_word" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2185 2211])) :type ("string" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2142 2212]) ("processLet" function (:prototype-flag t :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2232 2251])) :type "void") (reparse-symbol classsubparts) [2216 2252]) ("processOut" function (:prototype-flag t :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2271 2290])) :type "void") (reparse-symbol classsubparts) [2255 2291]) ("processCallMacro" function (:prototype-flag t :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2316 2335])) :type "void") (reparse-symbol classsubparts) [2294 2336]) ("processModifyCase" function (:prototype-flag t :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2362 2381])) :type "void") (reparse-symbol classsubparts) [2339 2382]) ("processLogical" function (:prototype-flag t :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2405 2424])) :type ("bool" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2385 2425]) ("processTest" function (:prototype-flag t :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2445 2464])) :type ("bool" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2428 2465]) ("processAnd" function (:prototype-flag t :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2484 2503])) :type ("bool" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2468 2504]) ("processOr" function (:prototype-flag t :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2522 2541])) :type ("bool" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2507 2542]) ("processEqual" function (:prototype-flag t :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2563 2582])) :type ("bool" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2545 2583]) ("processBeginsWith" function (:prototype-flag t :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2609 2628])) :type ("bool" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2586 2629]) ("processEndsWith" function (:prototype-flag t :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2653 2672])) :type ("bool" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2632 2673]) ("processContainsSubstring" function (:prototype-flag t :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2706 2725])) :type ("bool" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2676 2726]) ("processNot" function (:prototype-flag t :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2745 2764])) :type ("bool" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2729 2765]) ("processIn" function (:prototype-flag t :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2783 2802])) :type ("bool" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2768 2803]) ("processRule" function (:prototype-flag t :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2823 2842])) :type "void") (reparse-symbol classsubparts) [2806 2843]) ("evalString" function (:prototype-flag t :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2864 2883])) :type ("string" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2846 2884]) ("processInstruction" function (:prototype-flag t :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2911 2930])) :type "void") (reparse-symbol classsubparts) [2887 2931]) ("processChoose" function (:prototype-flag t :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2953 2972])) :type "void") (reparse-symbol classsubparts) [2934 2973]) ("processChunk" function (:prototype-flag t :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2994 3013])) :type "void") (reparse-symbol classsubparts) [2976 3014]) ("processTags" function (:prototype-flag t :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3034 3053])) :type "void") (reparse-symbol classsubparts) [3017 3054]) ("beginsWith" function (:prototype-flag t :arguments (("str1" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3074 3093]) ("str2" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3094 3113])) :type ("bool" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3058 3120]) ("endsWith" function (:prototype-flag t :arguments (("str1" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3137 3156]) ("str2" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3157 3176])) :type ("bool" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3123 3183]) ("tolower" function (:prototype-flag t :arguments (("str" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3201 3219])) :type ("string" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3186 3226]) ("tags" function (:prototype-flag t :arguments (("str" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3241 3259])) :type ("string" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3229 3266]) ("readWord" function (:prototype-flag t :arguments (("in" variable (:pointer 1 :type ("FILE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3285 3294])) :type ("string" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3269 3295]) ("readBlank" function (:prototype-flag t :arguments (("in" variable (:pointer 1 :type ("FILE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3315 3324])) :type ("string" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3298 3325]) ("readUntil" function (:prototype-flag t :arguments (("in" variable (:pointer 1 :type ("FILE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3345 3354]) ("symbol" variable (:constant-flag t :type "int") (reparse-symbol arg-sub-list) [3355 3372])) :type ("string" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3328 3379]) ("applyWord" function (:prototype-flag t :arguments (("word_str" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3397 3421])) :type "void") (reparse-symbol classsubparts) [3382 3422]) ("applyRule" function (:prototype-flag t :type "void") (reparse-symbol classsubparts) [3425 3442]) ("readToken" function (:prototype-flag t :arguments (("in" variable (:pointer 1 :type ("FILE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3471 3480])) :type ("TransferToken" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3445 3481]) ("public" label nil (reparse-symbol classsubparts) [3482 3489]) ("Interchunk" function (:prototype-flag t :constructor-flag t :type ("Interchunk" type "class")) (reparse-symbol classsubparts) [3492 3505]) ("Interchunk" function (:prototype-flag t :destructor-flag t :type "void") (reparse-symbol classsubparts) [3508 3522]) ("Interchunk" function (:prototype-flag t :constructor-flag t :arguments (("o" variable (:constant-flag t :type ("Interchunk" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3536 3556])) :type ("Interchunk" type "class")) (reparse-symbol classsubparts) [3525 3557]) ("read" function (:prototype-flag t :arguments (("transferfile" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3621 3648]) ("datafile" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3649 3672])) :type "void") (reparse-symbol classsubparts) [3611 3673]) ("interchunk" function (:prototype-flag t :arguments (("in" variable (:pointer 1 :type ("FILE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3692 3701]) ("out" variable (:pointer 1 :type ("FILE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3702 3712])) :type "void") (reparse-symbol classsubparts) [3676 3713])) :type "class") nil [1256 3716]))
    :file "Interchunk.H"
    :pointmax 3725
    :unmatched-syntax 'nil
    )
   (semanticdb-table "InterchunkWord.C"
    :major-mode 'c++-mode
    :tags '(("apertium/InterchunkWord.H" include (:system-flag t) nil [798 834]) ("iostream" include (:system-flag t) nil [835 854]) ("copy" function (:parent "InterchunkWord" :arguments (("o" variable (:constant-flag t :type ("InterchunkWord" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [882 906])) :type "void") nil [856 935]) ("destroy" function (:parent "InterchunkWord" :type "void") nil [937 971]) ("InterchunkWord" function (:constructor-flag t :parent "InterchunkWord" :type ("InterchunkWord" type "class")) nil [973 1009]) ("InterchunkWord" function (:constructor-flag t :parent "InterchunkWord" :arguments (("chunk" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1042 1062])) :type ("InterchunkWord" type "class")) nil [1011 1081]) ("InterchunkWord" function (:destructor-flag t :parent "InterchunkWord" :type "void") nil [1083 1133]) ("InterchunkWord" function (:constructor-flag t :parent "InterchunkWord" :arguments (("o" variable (:constant-flag t :type ("InterchunkWord" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1166 1190])) :type ("InterchunkWord" type "class")) nil [1135 1205]) ("init" function (:parent "InterchunkWord" :arguments (("chunk" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1376 1396])) :type "void") nil [1350 1423]) ("chunkPart" function (:parent "InterchunkWord" :arguments (("part" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1458 1477])) :type ("string" type (:type "class") nil nil)) nil [1425 1727]) ("setChunkPart" function (:parent "InterchunkWord" :arguments (("part" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1763 1782]) ("value" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1783 1803])) :type "void") nil [1729 2013]))
    :file "InterchunkWord.C"
    :pointmax 2014
    :unmatched-syntax 'nil
    )
   (semanticdb-table "InterchunkWord.H"
    :major-mode 'c++-mode
    :tags '(("_INTERCHUNKWORD_" variable (:constant-flag t) nil [824 851]) ("map" include (:system-flag t) nil [850 864]) ("pcrecpp.h" include (:system-flag t) nil [865 885]) ("string" include (:system-flag t) nil [886 903]) ("InterchunkWord" type (:members (("private" label nil (reparse-symbol classsubparts) [992 1000]) ("chunk" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1041 1054]) ("copy" function (:prototype-flag t :arguments (("o" variable (:constant-flag t :type ("InterchunkWord" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1137 1161])) :type "void") (reparse-symbol classsubparts) [1127 1162]) ("destroy" function (:prototype-flag t :type "void") (reparse-symbol classsubparts) [1200 1215]) ("public" label nil (reparse-symbol classsubparts) [1219 1226]) ("InterchunkWord" function (:prototype-flag t :constructor-flag t :type ("InterchunkWord" type "class")) (reparse-symbol classsubparts) [1273 1290]) ("InterchunkWord" function (:prototype-flag t :destructor-flag t :type "void") (reparse-symbol classsubparts) [1321 1339]) ("InterchunkWord" function (:prototype-flag t :constructor-flag t :arguments (("o" variable (:constant-flag t :type ("InterchunkWord" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1432 1456])) :type ("InterchunkWord" type "class")) (reparse-symbol classsubparts) [1417 1457]) ("InterchunkWord" function (:prototype-flag t :constructor-flag t :arguments (("chunk" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1561 1581])) :type ("InterchunkWord" type "class")) (reparse-symbol classsubparts) [1546 1582]) ("init" function (:prototype-flag t :arguments (("chunk" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1840 1860])) :type "void") (reparse-symbol classsubparts) [1830 1861]) ("chunkPart" function (:prototype-flag t :arguments (("part" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2024 2043])) :type ("string" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2007 2044]) ("setChunkPart" function (:prototype-flag t :arguments (("part" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2209 2228]) ("value" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2229 2249])) :type "void") (reparse-symbol classsubparts) [2191 2250])) :type "class") nil [969 2254]))
    :file "InterchunkWord.H"
    :pointmax 2263
    :unmatched-syntax 'nil
    )
   (semanticdb-table "Postchunk.C"
    :major-mode 'c++-mode
    :tags '(("apertium/Postchunk.H" include (:system-flag t) nil [798 829]) ("apertium/TRXReader.H" include (:system-flag t) nil [830 861]) ("apertium/UtfConverter.H" include (:system-flag t) nil [862 896]) ("lttoolbox/Compression.H" include (:system-flag t) nil [897 931]) ("lttoolbox/XMLParseUtil.H" include (:system-flag t) nil [932 967]) ("cctype" include (:system-flag t) nil [969 986]) ("iostream" include (:system-flag t) nil [987 1006]) ("stack" include (:system-flag t) nil [1007 1023]) ("copy" function (:parent "Postchunk" :arguments (("o" variable (:constant-flag t :type ("Postchunk" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1068 1087])) :type "void") nil [1047 1091]) ("destroy" function (:parent "Postchunk" :type "void") nil [1093 1226]) ("Postchunk" function (:constructor-flag t :parent "Postchunk" :type ("Postchunk" type "class")) nil [1228 1323]) ("Postchunk" function (:destructor-flag t :parent "Postchunk" :type "void") nil [1325 1365]) ("Postchunk" function (:constructor-flag t :parent "Postchunk" :arguments (("o" variable (:constant-flag t :type ("Postchunk" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1388 1407])) :type ("Postchunk" type "class")) nil [1367 1422]) ("readData" function (:parent "Postchunk" :arguments (("in" variable (:pointer 1 :type ("FILE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1578 1587])) :type "void") nil [1552 4061]) ("read" function (:parent "Postchunk" :arguments (("transferfile" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4084 4111]) ("datafile" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4112 4135])) :type "void") nil [4063 4375]) ("readPostchunk" function (:parent "Postchunk" :arguments (("in" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4407 4424])) :type "void") nil [4377 5018]) ("collectRules" function (:parent "Postchunk" :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5049 5068])) :type "void") nil [5020 5420]) ("collectMacros" function (:parent "Postchunk" :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5452 5471])) :type "void") nil [5422 5625]) ("evalString" function (:parent "Postchunk" :arguments (("element" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5657 5674])) :type ("string" type (:type "class") nil nil)) nil [5627 9267]) ("processOut" function (:parent "Postchunk" :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9296 9315])) :type "void") nil [9269 10971]) ("processTags" function (:parent "Postchunk" :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11001 11020])) :type "void") nil [10973 11447]) ("processInstruction" function (:parent "Postchunk" :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11484 11503])) :type "void") nil [11449 12031]) ("processLet" function (:parent "Postchunk" :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12060 12079])) :type "void") nil [12033 13742]) ("processModifyCase" function (:parent "Postchunk" :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13778 13797])) :type "void") nil [13744 14927]) ("processCallMacro" function (:parent "Postchunk" :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14962 14981])) :type "void") nil [14929 16165]) ("processChoose" function (:parent "Postchunk" :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16197 16216])) :type "void") nil [16167 17089]) ("processLogical" function (:parent "Postchunk" :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17122 17141])) :type ("bool" type (:type "class") nil nil)) nil [17091 18046]) ("processIn" function (:parent "Postchunk" :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [18074 18093])) :type ("bool" type (:type "class") nil nil)) nil [18048 18918]) ("processTest" function (:parent "Postchunk" :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [18948 18967])) :type ("bool" type (:type "class") nil nil)) nil [18920 19141]) ("processAnd" function (:parent "Postchunk" :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [19170 19189])) :type ("bool" type (:type "class") nil nil)) nil [19143 19392]) ("processOr" function (:parent "Postchunk" :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [19420 19439])) :type ("bool" type (:type "class") nil nil)) nil [19394 19645]) ("processNot" function (:parent "Postchunk" :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [19674 19693])) :type ("bool" type (:type "class") nil nil)) nil [19647 19866]) ("processEqual" function (:parent "Postchunk" :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [19897 19916])) :type ("bool" type (:type "class") nil nil)) nil [19868 20550]) ("beginsWith" function (:parent "Postchunk" :arguments (("s1" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [20579 20596]) ("s2" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [20597 20614])) :type ("bool" type (:type "class") nil nil)) nil [20552 20846]) ("endsWith" function (:parent "Postchunk" :arguments (("s1" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [20873 20890]) ("s2" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [20891 20908])) :type ("bool" type (:type "class") nil nil)) nil [20848 21142]) ("processBeginsWith" function (:parent "Postchunk" :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [21179 21198])) :type ("bool" type (:type "class") nil nil)) nil [21145 21862]) ("processEndsWith" function (:parent "Postchunk" :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [21896 21915])) :type ("bool" type (:type "class") nil nil)) nil [21864 22573]) ("processContainsSubstring" function (:parent "Postchunk" :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22616 22635])) :type ("bool" type (:type "class") nil nil)) nil [22575 23326]) ("copycase" function (:parent "Postchunk" :arguments (("source_word" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [23355 23381]) ("target_word" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [23382 23408])) :type ("string" type (:type "class") nil nil)) nil [23328 23990]) ("caseOf" function (:parent "Postchunk" :arguments (("str" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [24018 24036])) :type ("string" type (:type "class") nil nil)) nil [23992 24400]) ("caseOf" function (:parent "Postchunk" :arguments (("str" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [24429 24448])) :type ("wstring" type (:type "class") nil nil)) nil [24402 24821]) ("tolower" function (:parent "Postchunk" :arguments (("str" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [24849 24867])) :type ("string" type (:type "class") nil nil)) nil [24823 25027]) ("tags" function (:parent "Postchunk" :arguments (("str" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [25052 25070])) :type ("string" type (:type "class") nil nil)) nil [25029 25319]) ("processRule" function (:parent "Postchunk" :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [25349 25368])) :type "void") nil [25321 25569]) ("readToken" function (:parent "Postchunk" :arguments (("in" variable (:pointer 1 :type ("FILE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [25608 25617])) :type ("TransferToken" type (:type "class") nil nil)) nil [25571 26861]) ("postchunk" function (:parent "Postchunk" :arguments (("in" variable (:pointer 1 :type ("FILE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [26889 26898]) ("out" variable (:pointer 1 :type ("FILE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [26899 26909])) :type "void") nil [26863 28248]) ("applyRule" function (:parent "Postchunk" :type "void") nil [28250 29487]) ("applyWord" function (:parent "Postchunk" :arguments (("word_str" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [29515 29539])) :type "void") nil [29489 30245]) ("getVecTags" function (:parent "Postchunk" :arguments (("chunk" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [30285 30306])) :type ("vector" type (:type "class") nil nil)) nil [30247 30717]) ("beginChunk" function (:parent "Postchunk" :arguments (("chunk" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [30745 30766])) :type "int") nil [30719 30968]) ("endChunk" function (:parent "Postchunk" :arguments (("chunk" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [30994 31015])) :type "int") nil [30970 31044]) ("wordzero" function (:parent "Postchunk" :arguments (("chunk" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [31074 31095])) :type ("wstring" type (:type "class") nil nil)) nil [31046 31311]) ("pseudolemma" function (:parent "Postchunk" :arguments (("chunk" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [31344 31365])) :type ("wstring" type (:type "class") nil nil)) nil [31313 31603]) ("unchunk" function (:parent "Postchunk" :arguments (("chunk" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [31629 31650]) ("output" variable (:pointer 1 :type ("FILE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [31651 31664])) :type "void") nil [31605 34014]) ("splitWordsAndBlanks" function (:parent "Postchunk" :arguments (("chunk" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34053 34074]) ("words" variable (:type ("vector" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34075 34100]) ("blanks" variable (:type ("vector" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34132 34158])) :type "void") nil [34017 36543]))
    :file "Postchunk.C"
    :pointmax 36545
    :unmatched-syntax 'nil
    )
   (semanticdb-table "Postchunk.H"
    :major-mode 'c++-mode
    :tags '(("_POSTCHUNK_" variable (:constant-flag t) nil [818 840]) ("apertium/TransferInstr.H" include (:system-flag t) nil [839 874]) ("apertium/TransferToken.H" include (:system-flag t) nil [875 910]) ("apertium/InterchunkWord.H" include (:system-flag t) nil [911 947]) ("lttoolbox/Alphabet.H" include (:system-flag t) nil [948 979]) ("lttoolbox/Buffer.H" include (:system-flag t) nil [980 1009]) ("lttoolbox/MatchExe.H" include (:system-flag t) nil [1010 1041]) ("lttoolbox/MatchState.H" include (:system-flag t) nil [1042 1075]) ("cstdio" include (:system-flag t) nil [1077 1094]) ("libxml/parser.h" include (:system-flag t) nil [1095 1121]) ("libxml/tree.h" include (:system-flag t) nil [1122 1146]) ("map" include (:system-flag t) nil [1147 1161]) ("set" include (:system-flag t) nil [1162 1176]) ("vector" include (:system-flag t) nil [1177 1194]) ("Postchunk" type (:members (("private" label nil (reparse-symbol classsubparts) [1236 1244]) ("alphabet" variable (:type ("Alphabet" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1250 1268]) ("me" variable (:pointer 1 :type ("MatchExe" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1271 1284]) ("ms" variable (:type ("MatchState" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1287 1301]) ("attr_items" variable (:type ("map" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1304 1335]) ("variables" variable (:type ("map" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1338 1368]) ("macros" variable (:type ("map" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1371 1395]) ("lists" variable (:type ("map" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1398 1430]) ("listslow" variable (:type ("map" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1433 1468]) ("macro_map" variable (:type ("vector" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1471 1499]) ("rule_map" variable (:type ("vector" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1502 1529]) ("doc" variable (:pointer 1 :type ("xmlDoc" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1532 1544]) ("root_element" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1547 1569]) ("word" variable (:pointer 2 :type ("InterchunkWord" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1572 1594]) ("blank" variable (:pointer 2 :type ("string" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1597 1612]) ("input_buffer" variable (:type ("Buffer" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1615 1650]) ("tmpword" variable (:type ("vector" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1653 1679]) ("tmpblank" variable (:type ("vector" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1682 1709]) ("output" variable (:pointer 1 :type ("FILE" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1713 1726]) ("any_char" variable (:type "int") (reparse-symbol classsubparts) [1729 1742]) ("any_tag" variable (:type "int") (reparse-symbol classsubparts) [1745 1757]) ("lastrule" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1761 1779]) ("nwords" variable (:type "unsigned int") (reparse-symbol classsubparts) [1782 1802]) ("evalStringCache" variable (:type ("map" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1808 1854]) ("copy" function (:prototype-flag t :arguments (("o" variable (:constant-flag t :type ("Postchunk" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1868 1887])) :type "void") (reparse-symbol classsubparts) [1858 1888]) ("destroy" function (:prototype-flag t :type "void") (reparse-symbol classsubparts) [1891 1906]) ("readData" function (:prototype-flag t :arguments (("input" variable (:pointer 1 :type ("FILE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1923 1935])) :type "void") (reparse-symbol classsubparts) [1909 1936]) ("readPostchunk" function (:prototype-flag t :arguments (("input" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1958 1978])) :type "void") (reparse-symbol classsubparts) [1939 1979]) ("collectMacros" function (:prototype-flag t :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2001 2020])) :type "void") (reparse-symbol classsubparts) [1982 2021]) ("collectRules" function (:prototype-flag t :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2042 2061])) :type "void") (reparse-symbol classsubparts) [2024 2062]) ("caseOf" function (:prototype-flag t :typemodifiers ("static") :arguments (("str" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2086 2104])) :type ("string" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2065 2105]) ("caseOf" function (:prototype-flag t :typemodifiers ("static") :arguments (("str" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2130 2149])) :type ("wstring" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2108 2150]) ("copycase" function (:prototype-flag t :arguments (("source_word" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2169 2195]) ("target_word" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2196 2222])) :type ("string" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2153 2223]) ("processLet" function (:prototype-flag t :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2243 2262])) :type "void") (reparse-symbol classsubparts) [2227 2263]) ("processOut" function (:prototype-flag t :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2282 2301])) :type "void") (reparse-symbol classsubparts) [2266 2302]) ("processCallMacro" function (:prototype-flag t :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2327 2346])) :type "void") (reparse-symbol classsubparts) [2305 2347]) ("processModifyCase" function (:prototype-flag t :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2373 2392])) :type "void") (reparse-symbol classsubparts) [2350 2393]) ("processLogical" function (:prototype-flag t :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2416 2435])) :type ("bool" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2396 2436]) ("processTest" function (:prototype-flag t :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2456 2475])) :type ("bool" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2439 2476]) ("processAnd" function (:prototype-flag t :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2495 2514])) :type ("bool" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2479 2515]) ("processOr" function (:prototype-flag t :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2533 2552])) :type ("bool" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2518 2553]) ("processEqual" function (:prototype-flag t :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2574 2593])) :type ("bool" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2556 2594]) ("processBeginsWith" function (:prototype-flag t :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2620 2639])) :type ("bool" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2597 2640]) ("processEndsWith" function (:prototype-flag t :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2664 2683])) :type ("bool" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2643 2684]) ("processContainsSubstring" function (:prototype-flag t :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2717 2736])) :type ("bool" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2687 2737]) ("processNot" function (:prototype-flag t :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2756 2775])) :type ("bool" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2740 2776]) ("processIn" function (:prototype-flag t :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2794 2813])) :type ("bool" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2779 2814]) ("processRule" function (:prototype-flag t :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2834 2853])) :type "void") (reparse-symbol classsubparts) [2817 2854]) ("evalString" function (:prototype-flag t :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2875 2894])) :type ("string" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2857 2895]) ("processInstruction" function (:prototype-flag t :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2922 2941])) :type "void") (reparse-symbol classsubparts) [2898 2942]) ("processChoose" function (:prototype-flag t :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2964 2983])) :type "void") (reparse-symbol classsubparts) [2945 2984]) ("processTags" function (:prototype-flag t :arguments (("localroot" variable (:pointer 1 :type ("xmlNode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3004 3023])) :type "void") (reparse-symbol classsubparts) [2987 3024]) ("beginsWith" function (:prototype-flag t :arguments (("str1" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3043 3062]) ("str2" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3063 3082])) :type ("bool" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3027 3089]) ("endsWith" function (:prototype-flag t :arguments (("str1" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3106 3125]) ("str2" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3126 3145])) :type ("bool" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3092 3152]) ("tolower" function (:prototype-flag t :arguments (("str" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3170 3188])) :type ("string" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3155 3195]) ("tags" function (:prototype-flag t :arguments (("str" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3210 3228])) :type ("string" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3198 3235]) ("readWord" function (:prototype-flag t :arguments (("in" variable (:pointer 1 :type ("FILE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3254 3263])) :type ("string" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3238 3264]) ("readBlank" function (:prototype-flag t :arguments (("in" variable (:pointer 1 :type ("FILE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3284 3293])) :type ("string" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3267 3294]) ("readUntil" function (:prototype-flag t :arguments (("in" variable (:pointer 1 :type ("FILE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3314 3323]) ("symbol" variable (:constant-flag t :type "int") (reparse-symbol arg-sub-list) [3324 3341])) :type ("string" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3297 3348]) ("applyWord" function (:prototype-flag t :arguments (("word_str" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3366 3390])) :type "void") (reparse-symbol classsubparts) [3351 3391]) ("applyRule" function (:prototype-flag t :type "void") (reparse-symbol classsubparts) [3394 3411]) ("readToken" function (:prototype-flag t :arguments (("in" variable (:pointer 1 :type ("FILE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3440 3449])) :type ("TransferToken" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3414 3450]) ("unchunk" function (:prototype-flag t :typemodifiers ("static") :arguments (("chunk" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3473 3494]) ("output" variable (:pointer 1 :type ("FILE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3495 3508])) :type "void") (reparse-symbol classsubparts) [3453 3509]) ("getVecTags" function (:prototype-flag t :typemodifiers ("static") :arguments (("chunk" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3546 3567])) :type ("vector" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3512 3568]) ("beginChunk" function (:prototype-flag t :typemodifiers ("static") :arguments (("chunk" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3593 3614])) :type "int") (reparse-symbol classsubparts) [3571 3615]) ("endChunk" function (:prototype-flag t :typemodifiers ("static") :arguments (("chunk" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3638 3659])) :type "int") (reparse-symbol classsubparts) [3618 3660]) ("splitWordsAndBlanks" function (:prototype-flag t :typemodifiers ("static") :arguments (("chunk" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3695 3716]) ("words" variable (:type ("vector" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3724 3749]) ("blanks" variable (:type ("vector" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3756 3782])) :type "void") (reparse-symbol classsubparts) [3663 3783]) ("pseudolemma" function (:prototype-flag t :typemodifiers ("static") :arguments (("chunk" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3813 3834])) :type ("wstring" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3786 3835]) ("wordzero" function (:prototype-flag t :typemodifiers ("static") :arguments (("chunk" variable (:constant-flag t :type ("wstring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3862 3883])) :type ("wstring" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3838 3884]) ("public" label nil (reparse-symbol classsubparts) [3885 3892]) ("Postchunk" function (:prototype-flag t :constructor-flag t :type ("Postchunk" type "class")) (reparse-symbol classsubparts) [3895 3907]) ("Postchunk" function (:prototype-flag t :destructor-flag t :type "void") (reparse-symbol classsubparts) [3910 3923]) ("Postchunk" function (:prototype-flag t :constructor-flag t :arguments (("o" variable (:constant-flag t :type ("Postchunk" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3936 3955])) :type ("Postchunk" type "class")) (reparse-symbol classsubparts) [3926 3956]) ("read" function (:prototype-flag t :arguments (("transferfile" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4018 4045]) ("datafile" variable (:constant-flag t :type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4046 4069])) :type "void") (reparse-symbol classsubparts) [4008 4070]) ("postchunk" function (:prototype-flag t :arguments (("in" variable (:pointer 1 :type ("FILE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4088 4097]) ("out" variable (:pointer 1 :type ("FILE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4098 4108])) :type "void") (reparse-symbol classsubparts) [4073 4109])) :type "class") nil [1218 4112]))
    :file "Postchunk.H"
    :pointmax 4121
    :unmatched-syntax 'nil
    )
   (semanticdb-table "LexTorEval.C"
    :major-mode 'c++-mode
    :tags '(("iostream" include (:system-flag t) nil [824 843]) ("cmath" include (:system-flag t) nil [844 860]) ("apertium/LexTorEval.H" include (:system-flag t) nil [861 893]) ("apertium/LexTor.H" include (:system-flag t) nil [894 922]) ("LexTorEval" function (:constructor-flag t :parent "LexTorEval" :arguments (("iref" variable (:pointer 1 :type ("wistream" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [947 962])) :type ("LexTorEval" type "class")) nil [924 1685]) ("LexTorEval" function (:destructor-flag t :parent "LexTorEval" :type "void") nil [1687 1716]) ("print_evaluation" function (:parent "LexTorEval" :type "void") nil [1718 3212]) ("evalword" function (:parent "LexTorEval" :arguments (("ltword" variable (:type ("LexTorWord" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3241 3260]) ("winner" variable (:type "int") (reparse-symbol arg-sub-list) [3261 3272]) ("lextor_data" variable (:pointer 1 :type ("LexTorData" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3273 3297])) :type "void") nil [3214 4655]))
    :file "LexTorEval.C"
    :pointmax 4656
    :unmatched-syntax 'nil
    )
   (semanticdb-table "LexTorEval.H"
    :major-mode 'c++-mode
    :tags '(("__LEXTOR_EVAL_H" variable (:constant-flag t) nil [848 874]) ("string" include (:system-flag t) nil [873 890]) ("vector" include (:system-flag t) nil [891 908]) ("set" include (:system-flag t) nil [909 923]) ("map" include (:system-flag t) nil [924 938]) ("istream" include (:system-flag t) nil [939 957]) ("apertium/LexTorData.H" include (:system-flag t) nil [958 990]) ("apertium/LexTorWord.H" include (:system-flag t) nil [991 1023]) ("LexTorEval" type (:members (("private" label nil (reparse-symbol classsubparts) [1066 1074]) ("nwords" variable (:type "double") (reparse-symbol classsubparts) [1078 1092]) ("nignored" variable (:type "double") (reparse-symbol classsubparts) [1116 1132]) ("npol" variable (:type "double") (reparse-symbol classsubparts) [1135 1147]) ("nerrors_pol" variable (:type "double") (reparse-symbol classsubparts) [1176 1195]) ("ndefault" variable (:type "double") (reparse-symbol classsubparts) [1223 1239]) ("nwords_per_word" variable (:type ("map" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1243 1280]) ("nerrors_per_word" variable (:type ("map" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1283 1321]) ("ndefault_per_word" variable (:type ("map" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1324 1363]) ("refer" variable (:pointer 1 :type ("wistream" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1367 1383]) ("words2ignore" variable (:type ("set" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1387 1413]) ("public" label nil (reparse-symbol classsubparts) [1414 1421]) ("LexTorEval" function (:prototype-flag t :constructor-flag t :arguments (("iref" variable (:pointer 1 :type ("wistream" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1439 1454])) :type ("LexTorEval" type "class")) (reparse-symbol classsubparts) [1428 1455]) ("LexTorEval" function (:prototype-flag t :destructor-flag t :type "void") (reparse-symbol classsubparts) [1459 1473]) ("evalword" function (:prototype-flag t :arguments (("ltword" variable (:type ("LexTorWord" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1491 1510]) ("winner" variable (:type "int") (reparse-symbol arg-sub-list) [1511 1522]) ("lextor_data" variable (:pointer 1 :type ("LexTorData" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1523 1547])) :type "void") (reparse-symbol classsubparts) [1477 1548]) ("print_evaluation" function (:prototype-flag t :type "void") (reparse-symbol classsubparts) [1552 1576])) :type "class") nil [1047 1579]))
    :file "LexTorEval.H"
    :pointmax 1588
    )
   (semanticdb-table "apertium-lextor.C"
    :major-mode 'c++-mode
    :tags '(("iostream" include (:system-flag t) nil [838 857]) ("fstream" include (:system-flag t) nil [858 876]) ("getopt.h" include (:system-flag t) nil [877 896]) ("lttoolbox/FSTProcessor.H" include (:system-flag t) nil [898 933]) ("apertium/LexTor.H" include (:system-flag t) nil [935 963]) ("apertium/LexTorWord.H" include (:system-flag t) nil [964 996]) ("apertium/LexTorData.H" include (:system-flag t) nil [997 1029]) ("apertium/UtfConverter.H" include (:system-flag t) nil [1030 1064]) ("clocale" include (:system-flag t) nil [1065 1083]) ("cstdlib" include (:system-flag t) nil [1084 1102]) ("MODE_TRAINWRD" variable (:constant-flag t :default-value (nil)) nil [1104 1127]) ("MODE_TRAINLCH" variable (:constant-flag t :default-value (nil)) nil [1128 1151]) ("MODE_LEXTOR" variable (:constant-flag t :default-value (nil)) nil [1152 1173]) ("MODE_LEXTORTL" variable (:constant-flag t :default-value (nil)) nil [1174 1197]) ("help" function (:arguments (("name" variable (:pointer 1 :type "char") (reparse-symbol arg-sub-list) [1232 1243])) :type "void") nil [1222 5102]) ("main" function (:arguments (("argc" variable (:type "int") (reparse-symbol arg-sub-list) [5113 5122]) ("argv" variable (:pointer 1 :dereference 1 :type "char") (reparse-symbol arg-sub-list) [5123 5136])) :type "int") nil [5104 20537]))
    :file "apertium-lextor.C"
    :pointmax 20538
    )
   (semanticdb-table "apertium-gen-wlist-lextor-translation.C"
    :major-mode 'c++-mode
    :tags '(("iostream" include (:system-flag t) nil [838 857]) ("fstream" include (:system-flag t) nil [858 876]) ("getopt.h" include (:system-flag t) nil [877 896]) ("string" include (:system-flag t) nil [897 914]) ("lttoolbox/FSTProcessor.H" include (:system-flag t) nil [916 951]) ("apertium/LexTorWord.H" include (:system-flag t) nil [953 985]) ("apertium/UtfConverter.H" include (:system-flag t) nil [986 1020]) ("help" function (:arguments (("name" variable (:pointer 1 :type "char") (reparse-symbol arg-sub-list) [1055 1066])) :type "void") nil [1045 1629]) ("main" function (:arguments (("argc" variable (:type "int") (reparse-symbol arg-sub-list) [1640 1649]) ("argv" variable (:pointer 1 :dereference 1 :type "char") (reparse-symbol arg-sub-list) [1650 1663])) :type "int") nil [1631 5414]))
    :file "apertium-gen-wlist-lextor-translation.C"
    :pointmax 5415
    )
   )
  :file "semantic.cache"
  :semantic-tag-version "2.0pre3"
  :semanticdb-version "2.0pre3"
  )
